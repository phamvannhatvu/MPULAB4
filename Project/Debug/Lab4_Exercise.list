
Lab4_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003bfc  08003bfc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bfc  08003bfc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c00  08003c00  00013c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08003c78  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08003c78  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d107  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f05  00000000  00000000  0002d1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  0002f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b8b  00000000  00000000  00030968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e447  00000000  00000000  000484f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008880e  00000000  00000000  0005693a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  000df198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b34 	.word	0x08003b34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003b34 	.word	0x08003b34

0800014c <LED_BTN_toggle>:

uint32_t pressedCounter = 0;
uint8_t ledToggleTaskAdded = 0;

void LED_BTN_toggle(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BTN_GPIO_Port, LED_BTN_Pin);
 8000150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <LED_BTN_toggle+0x14>)
 8000156:	f001 fa0c 	bl	8001572 <HAL_GPIO_TogglePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <read_button>:

void read_button(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	GPIO_PinState curBtnReadVal = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800016a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800016e:	482f      	ldr	r0, [pc, #188]	; (800022c <read_button+0xc8>)
 8000170:	f001 f9d0 	bl	8001514 <HAL_GPIO_ReadPin>
 8000174:	4603      	mov	r3, r0
 8000176:	71fb      	strb	r3, [r7, #7]
	if (prevBtnReadVal[0] == prevBtnReadVal[1] && prevBtnReadVal[1] == curBtnReadVal)
 8000178:	4b2d      	ldr	r3, [pc, #180]	; (8000230 <read_button+0xcc>)
 800017a:	781a      	ldrb	r2, [r3, #0]
 800017c:	4b2c      	ldr	r3, [pc, #176]	; (8000230 <read_button+0xcc>)
 800017e:	785b      	ldrb	r3, [r3, #1]
 8000180:	429a      	cmp	r2, r3
 8000182:	d147      	bne.n	8000214 <read_button+0xb0>
 8000184:	4b2a      	ldr	r3, [pc, #168]	; (8000230 <read_button+0xcc>)
 8000186:	785b      	ldrb	r3, [r3, #1]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	429a      	cmp	r2, r3
 800018c:	d142      	bne.n	8000214 <read_button+0xb0>
	{
		if (curBtnReadVal != buttonState)
 800018e:	4b29      	ldr	r3, [pc, #164]	; (8000234 <read_button+0xd0>)
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	79fa      	ldrb	r2, [r7, #7]
 8000194:	429a      	cmp	r2, r3
 8000196:	d01e      	beq.n	80001d6 <read_button+0x72>
		{
			buttonState = curBtnReadVal;
 8000198:	4a26      	ldr	r2, [pc, #152]	; (8000234 <read_button+0xd0>)
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	7013      	strb	r3, [r2, #0]
			if (buttonState == PRESSED)
 800019e:	4b25      	ldr	r3, [pc, #148]	; (8000234 <read_button+0xd0>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d105      	bne.n	80001b2 <read_button+0x4e>
			{
				HAL_GPIO_TogglePin(LED_BTN_GPIO_Port, LED_BTN_Pin);
 80001a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001aa:	4820      	ldr	r0, [pc, #128]	; (800022c <read_button+0xc8>)
 80001ac:	f001 f9e1 	bl	8001572 <HAL_GPIO_TogglePin>
 80001b0:	e030      	b.n	8000214 <read_button+0xb0>
			}else
			{
				if (ledToggleTaskAdded == 1)
 80001b2:	4b21      	ldr	r3, [pc, #132]	; (8000238 <read_button+0xd4>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b01      	cmp	r3, #1
 80001b8:	d109      	bne.n	80001ce <read_button+0x6a>
				{
					SCH_Delete_Task(SCH_Find_Task(LED_BTN_toggle));
 80001ba:	4820      	ldr	r0, [pc, #128]	; (800023c <read_button+0xd8>)
 80001bc:	f000 fc98 	bl	8000af0 <SCH_Find_Task>
 80001c0:	4603      	mov	r3, r0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 fa78 	bl	80006b8 <SCH_Delete_Task>
					ledToggleTaskAdded = 0;
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <read_button+0xd4>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	701a      	strb	r2, [r3, #0]
				}
				pressedCounter = 0;
 80001ce:	4b1c      	ldr	r3, [pc, #112]	; (8000240 <read_button+0xdc>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	e01e      	b.n	8000214 <read_button+0xb0>
			}
		}else
		{
			if (buttonState == PRESSED)
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <read_button+0xd0>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d11a      	bne.n	8000214 <read_button+0xb0>
			{
				//check for press more than 1s
				++pressedCounter;
 80001de:	4b18      	ldr	r3, [pc, #96]	; (8000240 <read_button+0xdc>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	3301      	adds	r3, #1
 80001e4:	4a16      	ldr	r2, [pc, #88]	; (8000240 <read_button+0xdc>)
 80001e6:	6013      	str	r3, [r2, #0]
				if (pressedCounter * TICK_DURATION >= 1000)
 80001e8:	4b15      	ldr	r3, [pc, #84]	; (8000240 <read_button+0xdc>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001f8:	d30c      	bcc.n	8000214 <read_button+0xb0>
				{
					if (ledToggleTaskAdded == 0)
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <read_button+0xd4>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d108      	bne.n	8000214 <read_button+0xb0>
					{
						SCH_Add_Task(LED_BTN_toggle, 0, 500);
 8000202:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000206:	2100      	movs	r1, #0
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <read_button+0xd8>)
 800020a:	f000 fb89 	bl	8000920 <SCH_Add_Task>
						ledToggleTaskAdded = 1;
 800020e:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <read_button+0xd4>)
 8000210:	2201      	movs	r2, #1
 8000212:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
	prevBtnReadVal[0] = prevBtnReadVal[1];
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <read_button+0xcc>)
 8000216:	785a      	ldrb	r2, [r3, #1]
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <read_button+0xcc>)
 800021a:	701a      	strb	r2, [r3, #0]
	prevBtnReadVal[1] = curBtnReadVal;
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <read_button+0xcc>)
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	7053      	strb	r3, [r2, #1]
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40010c00 	.word	0x40010c00
 8000230:	20000000 	.word	0x20000000
 8000234:	20000002 	.word	0x20000002
 8000238:	20000094 	.word	0x20000094
 800023c:	0800014d 	.word	0x0800014d
 8000240:	20000090 	.word	0x20000090

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000248:	f000 fdc6 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024c:	f000 f84c 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000250:	f000 f8fc 	bl	800044c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000254:	f000 f884 	bl	8000360 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000258:	f000 f8ce 	bl	80003f8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 800025c:	f000 f9fc 	bl	8000658 <SCH_Init>
  SCH_Add_Task(LED05_blink, 110, 500);
 8000260:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000264:	216e      	movs	r1, #110	; 0x6e
 8000266:	4818      	ldr	r0, [pc, #96]	; (80002c8 <main+0x84>)
 8000268:	f000 fb5a 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(LED1_blink, 130, 1000);
 800026c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000270:	2182      	movs	r1, #130	; 0x82
 8000272:	4816      	ldr	r0, [pc, #88]	; (80002cc <main+0x88>)
 8000274:	f000 fb54 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(LED15_blink, 170, 1500);
 8000278:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800027c:	21aa      	movs	r1, #170	; 0xaa
 800027e:	4814      	ldr	r0, [pc, #80]	; (80002d0 <main+0x8c>)
 8000280:	f000 fb4e 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(LED2_blink, 190, 2000);
 8000284:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000288:	21be      	movs	r1, #190	; 0xbe
 800028a:	4812      	ldr	r0, [pc, #72]	; (80002d4 <main+0x90>)
 800028c:	f000 fb48 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(LED25_blink, 2500, 0);
 8000290:	2200      	movs	r2, #0
 8000292:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000296:	4810      	ldr	r0, [pc, #64]	; (80002d8 <main+0x94>)
 8000298:	f000 fb42 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(print10ms, 2000, 10);
 800029c:	220a      	movs	r2, #10
 800029e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002a2:	480e      	ldr	r0, [pc, #56]	; (80002dc <main+0x98>)
 80002a4:	f000 fb3c 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(print500ms, 2000, 500);
 80002a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002ac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <main+0x9c>)
 80002b2:	f000 fb35 	bl	8000920 <SCH_Add_Task>
  SCH_Add_Task(read_button, 0, 10);
 80002b6:	220a      	movs	r2, #10
 80002b8:	2100      	movs	r1, #0
 80002ba:	480a      	ldr	r0, [pc, #40]	; (80002e4 <main+0xa0>)
 80002bc:	f000 fb30 	bl	8000920 <SCH_Add_Task>

  while (1)
  {
	  SCH_Dispatch_Tasks();
 80002c0:	f000 faa2 	bl	8000808 <SCH_Dispatch_Tasks>
 80002c4:	e7fc      	b.n	80002c0 <main+0x7c>
 80002c6:	bf00      	nop
 80002c8:	08000511 	.word	0x08000511
 80002cc:	08000531 	.word	0x08000531
 80002d0:	08000551 	.word	0x08000551
 80002d4:	08000571 	.word	0x08000571
 80002d8:	08000591 	.word	0x08000591
 80002dc:	080005b1 	.word	0x080005b1
 80002e0:	080005c5 	.word	0x080005c5
 80002e4:	08000165 	.word	0x08000165

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f002 ff9a 	bl	8003230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030a:	2302      	movs	r3, #2
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030e:	2301      	movs	r3, #1
 8000310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	2310      	movs	r3, #16
 8000314:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000316:	2300      	movs	r3, #0
 8000318:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	4618      	mov	r0, r3
 8000320:	f001 f940 	bl	80015a4 <HAL_RCC_OscConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800032a:	f000 f979 	bl	8000620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032e:	230f      	movs	r3, #15
 8000330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2100      	movs	r1, #0
 8000346:	4618      	mov	r0, r3
 8000348:	f001 fbae 	bl	8001aa8 <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000352:	f000 f965 	bl	8000620 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000374:	463b      	mov	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800037c:	4b1d      	ldr	r3, [pc, #116]	; (80003f4 <MX_TIM2_Init+0x94>)
 800037e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000384:	4b1b      	ldr	r3, [pc, #108]	; (80003f4 <MX_TIM2_Init+0x94>)
 8000386:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800038a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <MX_TIM2_Init+0x94>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000392:	4b18      	ldr	r3, [pc, #96]	; (80003f4 <MX_TIM2_Init+0x94>)
 8000394:	2209      	movs	r2, #9
 8000396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000398:	4b16      	ldr	r3, [pc, #88]	; (80003f4 <MX_TIM2_Init+0x94>)
 800039a:	2200      	movs	r2, #0
 800039c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039e:	4b15      	ldr	r3, [pc, #84]	; (80003f4 <MX_TIM2_Init+0x94>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003a4:	4813      	ldr	r0, [pc, #76]	; (80003f4 <MX_TIM2_Init+0x94>)
 80003a6:	f001 fd0d 	bl	8001dc4 <HAL_TIM_Base_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003b0:	f000 f936 	bl	8000620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	4619      	mov	r1, r3
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <MX_TIM2_Init+0x94>)
 80003c2:	f001 fea3 	bl	800210c <HAL_TIM_ConfigClockSource>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003cc:	f000 f928 	bl	8000620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d0:	2300      	movs	r3, #0
 80003d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003d8:	463b      	mov	r3, r7
 80003da:	4619      	mov	r1, r3
 80003dc:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_TIM2_Init+0x94>)
 80003de:	f002 f86f 	bl	80024c0 <HAL_TIMEx_MasterConfigSynchronization>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003e8:	f000 f91a 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ec:	bf00      	nop
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	20000098 	.word	0x20000098

080003f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 80003fe:	4a12      	ldr	r2, [pc, #72]	; (8000448 <MX_USART1_UART_Init+0x50>)
 8000400:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000404:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000408:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000410:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800041e:	220c      	movs	r2, #12
 8000420:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042e:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_USART1_UART_Init+0x4c>)
 8000430:	f002 f8b0 	bl	8002594 <HAL_UART_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800043a:	f000 f8f1 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	200000e0 	.word	0x200000e0
 8000448:	40013800 	.word	0x40013800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a27      	ldr	r2, [pc, #156]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <MX_GPIO_Init+0xb8>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b22      	ldr	r3, [pc, #136]	; (8000504 <MX_GPIO_Init+0xb8>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <MX_GPIO_Init+0xb8>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <MX_GPIO_Init+0xb8>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f003 0308 	and.w	r3, r3, #8
 800048c:	603b      	str	r3, [r7, #0]
 800048e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED25_Pin|LED2_Pin|LED15_Pin|LED1_Pin
 8000490:	2200      	movs	r2, #0
 8000492:	213e      	movs	r1, #62	; 0x3e
 8000494:	481c      	ldr	r0, [pc, #112]	; (8000508 <MX_GPIO_Init+0xbc>)
 8000496:	f001 f854 	bl	8001542 <HAL_GPIO_WritePin>
                          |LED05_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BTN_GPIO_Port, LED_BTN_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a0:	481a      	ldr	r0, [pc, #104]	; (800050c <MX_GPIO_Init+0xc0>)
 80004a2:	f001 f84e 	bl	8001542 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED25_Pin LED2_Pin LED15_Pin LED1_Pin
                           LED05_Pin */
  GPIO_InitStruct.Pin = LED25_Pin|LED2_Pin|LED15_Pin|LED1_Pin
 80004a6:	233e      	movs	r3, #62	; 0x3e
 80004a8:	60bb      	str	r3, [r7, #8]
                          |LED05_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	4812      	ldr	r0, [pc, #72]	; (8000508 <MX_GPIO_Init+0xbc>)
 80004be:	f000 fead 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80004c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4619      	mov	r1, r3
 80004d6:	480d      	ldr	r0, [pc, #52]	; (800050c <MX_GPIO_Init+0xc0>)
 80004d8:	f000 fea0 	bl	800121c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_BTN_Pin */
  GPIO_InitStruct.Pin = LED_BTN_Pin;
 80004dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_BTN_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0308 	add.w	r3, r7, #8
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	; (800050c <MX_GPIO_Init+0xc0>)
 80004f6:	f000 fe91 	bl	800121c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004fa:	bf00      	nop
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800
 800050c:	40010c00 	.word	0x40010c00

08000510 <LED05_blink>:

/* USER CODE BEGIN 4 */
void LED05_blink()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED05_GPIO_Port, LED05_Pin);
 8000514:	2120      	movs	r1, #32
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <LED05_blink+0x18>)
 8000518:	f001 f82b 	bl	8001572 <HAL_GPIO_TogglePin>
	print_time("LED 0.5s");
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <LED05_blink+0x1c>)
 800051e:	f000 f85b 	bl	80005d8 <print_time>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40010800 	.word	0x40010800
 800052c:	08003b4c 	.word	0x08003b4c

08000530 <LED1_blink>:

void LED1_blink()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000534:	2110      	movs	r1, #16
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <LED1_blink+0x18>)
 8000538:	f001 f81b 	bl	8001572 <HAL_GPIO_TogglePin>
	print_time("LED 1s");
 800053c:	4803      	ldr	r0, [pc, #12]	; (800054c <LED1_blink+0x1c>)
 800053e:	f000 f84b 	bl	80005d8 <print_time>
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40010800 	.word	0x40010800
 800054c:	08003b58 	.word	0x08003b58

08000550 <LED15_blink>:

void LED15_blink()
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED15_GPIO_Port, LED15_Pin);
 8000554:	2108      	movs	r1, #8
 8000556:	4804      	ldr	r0, [pc, #16]	; (8000568 <LED15_blink+0x18>)
 8000558:	f001 f80b 	bl	8001572 <HAL_GPIO_TogglePin>
	print_time("LED 1.5s");
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <LED15_blink+0x1c>)
 800055e:	f000 f83b 	bl	80005d8 <print_time>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800
 800056c:	08003b60 	.word	0x08003b60

08000570 <LED2_blink>:

void LED2_blink()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000574:	2104      	movs	r1, #4
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <LED2_blink+0x18>)
 8000578:	f000 fffb 	bl	8001572 <HAL_GPIO_TogglePin>
	print_time("LED 2s");
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <LED2_blink+0x1c>)
 800057e:	f000 f82b 	bl	80005d8 <print_time>
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800
 800058c:	08003b6c 	.word	0x08003b6c

08000590 <LED25_blink>:

void LED25_blink()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED25_GPIO_Port, LED25_Pin);
 8000594:	2102      	movs	r1, #2
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <LED25_blink+0x18>)
 8000598:	f000 ffeb 	bl	8001572 <HAL_GPIO_TogglePin>
	print_time("LED 2.5s");
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <LED25_blink+0x1c>)
 800059e:	f000 f81b 	bl	80005d8 <print_time>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800
 80005ac:	08003b74 	.word	0x08003b74

080005b0 <print10ms>:

void print10ms()
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	print_time("10ms");
 80005b4:	4802      	ldr	r0, [pc, #8]	; (80005c0 <print10ms+0x10>)
 80005b6:	f000 f80f 	bl	80005d8 <print_time>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	08003b80 	.word	0x08003b80

080005c4 <print500ms>:

void print500ms()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	print_time("500ms");
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <print500ms+0x10>)
 80005ca:	f000 f805 	bl	80005d8 <print_time>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08003b88 	.word	0x08003b88

080005d8 <print_time>:

void print_time(const char *msg)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09c      	sub	sp, #112	; 0x70
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	char data[100];
	uint8_t len = sprintf(data, "%s: %lu\r", msg, display_counter);
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <print_time+0x3c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f107 0008 	add.w	r0, r7, #8
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	490b      	ldr	r1, [pc, #44]	; (8000618 <print_time+0x40>)
 80005ec:	f002 fe28 	bl	8003240 <siprintf>
 80005f0:	4603      	mov	r3, r0
 80005f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 500);
 80005f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	f107 0108 	add.w	r1, r7, #8
 8000600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <print_time+0x44>)
 8000606:	f002 f815 	bl	8002634 <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3770      	adds	r7, #112	; 0x70
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000128 	.word	0x20000128
 8000618:	08003b90 	.word	0x08003b90
 800061c:	200000e0 	.word	0x200000e0

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <Timer_Init>:
sTask SCH_tasks_G[SCH_MAX_TASKS];
uint8_t numOfTasks = 0;
uint32_t jitterTimes = 0;

void Timer_Init()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <Timer_Init+0x10>)
 8000632:	f001 fc17 	bl	8001e64 <HAL_TIM_Base_Start_IT>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000098 	.word	0x20000098

08000640 <SCH_Report_Status>:

void SCH_Report_Status()
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
	// Future work
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <SCH_Go_To_Sleep>:

void SCH_Go_To_Sleep()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	// Future work
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SCH_Init>:

void SCH_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	// Reset the value of non-empty tasks
	for (uint8_t i = 0; i < SCH_MAX_TASKS; ++i)
 800065e:	2300      	movs	r3, #0
 8000660:	71fb      	strb	r3, [r7, #7]
 8000662:	e006      	b.n	8000672 <SCH_Init+0x1a>
	{
		SCH_Delete_Task(i);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f826 	bl	80006b8 <SCH_Delete_Task>
	for (uint8_t i = 0; i < SCH_MAX_TASKS; ++i)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	3301      	adds	r3, #1
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d9f5      	bls.n	8000664 <SCH_Init+0xc>
	}
	Timer_Init();
 8000678:	f7ff ffd8 	bl	800062c <Timer_Init>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <SCH_Update>:

void SCH_Update(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	if (SCH_tasks_G[0].delay > 0)
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <SCH_Update+0x2c>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <SCH_Update+0x18>
	{
		--SCH_tasks_G[0].delay;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <SCH_Update+0x2c>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	3b01      	subs	r3, #1
 8000696:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <SCH_Update+0x2c>)
 8000698:	6053      	str	r3, [r2, #4]
	}else
	{
		// number of time the tasks are "jitter" because of a long task
		++jitterTimes;
	}
}
 800069a:	e004      	b.n	80006a6 <SCH_Update+0x22>
		++jitterTimes;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SCH_Update+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <SCH_Update+0x30>)
 80006a4:	6013      	str	r3, [r2, #0]
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	2000012c 	.word	0x2000012c
 80006b4:	200001a8 	.word	0x200001a8

080006b8 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(uint32_t index)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (index < numOfTasks)
 80006c0:	4b4f      	ldr	r3, [pc, #316]	; (8000800 <SCH_Delete_Task+0x148>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4293      	cmp	r3, r2
 80006ca:	f080 8093 	bcs.w	80007f4 <SCH_Delete_Task+0x13c>
	{
		if (index < numOfTasks - 1)
 80006ce:	4b4c      	ldr	r3, [pc, #304]	; (8000800 <SCH_Delete_Task+0x148>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	461a      	mov	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4293      	cmp	r3, r2
 80006da:	d21d      	bcs.n	8000718 <SCH_Delete_Task+0x60>
		{
			// Add the deleted task's delay to its successor
			SCH_tasks_G[index + 1].delay += SCH_tasks_G[index].delay;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	4948      	ldr	r1, [pc, #288]	; (8000804 <SCH_Delete_Task+0x14c>)
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	3304      	adds	r3, #4
 80006ee:	6819      	ldr	r1, [r3, #0]
 80006f0:	4844      	ldr	r0, [pc, #272]	; (8000804 <SCH_Delete_Task+0x14c>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4403      	add	r3, r0
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	3201      	adds	r2, #1
 8000706:	4419      	add	r1, r3
 8000708:	483e      	ldr	r0, [pc, #248]	; (8000804 <SCH_Delete_Task+0x14c>)
 800070a:	4613      	mov	r3, r2
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	4413      	add	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4403      	add	r3, r0
 8000714:	3304      	adds	r3, #4
 8000716:	6019      	str	r1, [r3, #0]
		}
		for (uint8_t i = index; i < numOfTasks - 1; ++i)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	73fb      	strb	r3, [r7, #15]
 800071c:	e039      	b.n	8000792 <SCH_Delete_Task+0xda>
		{
			SCH_tasks_G[i].delay = SCH_tasks_G[i + 1].delay;
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	1c59      	adds	r1, r3, #1
 8000722:	7bfa      	ldrb	r2, [r7, #15]
 8000724:	4837      	ldr	r0, [pc, #220]	; (8000804 <SCH_Delete_Task+0x14c>)
 8000726:	460b      	mov	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	440b      	add	r3, r1
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4403      	add	r3, r0
 8000730:	3304      	adds	r3, #4
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	4833      	ldr	r0, [pc, #204]	; (8000804 <SCH_Delete_Task+0x14c>)
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4403      	add	r3, r0
 8000740:	3304      	adds	r3, #4
 8000742:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].period = SCH_tasks_G[i + 1].period;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	1c59      	adds	r1, r3, #1
 8000748:	7bfa      	ldrb	r2, [r7, #15]
 800074a:	482e      	ldr	r0, [pc, #184]	; (8000804 <SCH_Delete_Task+0x14c>)
 800074c:	460b      	mov	r3, r1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	440b      	add	r3, r1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4403      	add	r3, r0
 8000756:	3308      	adds	r3, #8
 8000758:	6819      	ldr	r1, [r3, #0]
 800075a:	482a      	ldr	r0, [pc, #168]	; (8000804 <SCH_Delete_Task+0x14c>)
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4403      	add	r3, r0
 8000766:	3308      	adds	r3, #8
 8000768:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].pTask = SCH_tasks_G[i + 1].pTask;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	1c59      	adds	r1, r3, #1
 800076e:	7bfa      	ldrb	r2, [r7, #15]
 8000770:	4824      	ldr	r0, [pc, #144]	; (8000804 <SCH_Delete_Task+0x14c>)
 8000772:	460b      	mov	r3, r1
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	440b      	add	r3, r1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4403      	add	r3, r0
 800077c:	6819      	ldr	r1, [r3, #0]
 800077e:	4821      	ldr	r0, [pc, #132]	; (8000804 <SCH_Delete_Task+0x14c>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4403      	add	r3, r0
 800078a:	6019      	str	r1, [r3, #0]
		for (uint8_t i = index; i < numOfTasks - 1; ++i)
 800078c:	7bfb      	ldrb	r3, [r7, #15]
 800078e:	3301      	adds	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	7bfa      	ldrb	r2, [r7, #15]
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <SCH_Delete_Task+0x148>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	3b01      	subs	r3, #1
 800079a:	429a      	cmp	r2, r3
 800079c:	dbbf      	blt.n	800071e <SCH_Delete_Task+0x66>
		}
		--numOfTasks;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <SCH_Delete_Task+0x148>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <SCH_Delete_Task+0x148>)
 80007a8:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[numOfTasks].pTask = 0;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <SCH_Delete_Task+0x148>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <SCH_Delete_Task+0x14c>)
 80007b2:	460b      	mov	r3, r1
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	440b      	add	r3, r1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	4413      	add	r3, r2
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[numOfTasks].delay = 0;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <SCH_Delete_Task+0x148>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <SCH_Delete_Task+0x14c>)
 80007c8:	460b      	mov	r3, r1
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	440b      	add	r3, r1
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	4413      	add	r3, r2
 80007d2:	3304      	adds	r3, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[numOfTasks].period = 0;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <SCH_Delete_Task+0x148>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <SCH_Delete_Task+0x14c>)
 80007e0:	460b      	mov	r3, r1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	440b      	add	r3, r1
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	3308      	adds	r3, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]

		// Delete successfully
		return 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	e000      	b.n	80007f6 <SCH_Delete_Task+0x13e>
	}

	// Failed to delete
	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	200001a4 	.word	0x200001a4
 8000804:	2000012c 	.word	0x2000012c

08000808 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	do
	{
		// Execute the first tasks whose delay is zero (ready to be run)
		while (numOfTasks > 0 && SCH_tasks_G[0].delay == 0)
 800080e:	e01b      	b.n	8000848 <SCH_Dispatch_Tasks+0x40>
		{
			// Run the task
			(*SCH_tasks_G[0].pTask)();
 8000810:	4b40      	ldr	r3, [pc, #256]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4798      	blx	r3
			// If not one-shot task
			if (SCH_tasks_G[0].period > 0)
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d011      	beq.n	8000842 <SCH_Dispatch_Tasks+0x3a>
			{
				SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].period * TICK_DURATION,
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4619      	mov	r1, r3
						SCH_tasks_G[0].period * TICK_DURATION);
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000832:	689a      	ldr	r2, [r3, #8]
				SCH_Add_Task(SCH_tasks_G[0].pTask, SCH_tasks_G[0].period * TICK_DURATION,
 8000834:	4613      	mov	r3, r2
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4413      	add	r3, r2
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	461a      	mov	r2, r3
 800083e:	f000 f86f 	bl	8000920 <SCH_Add_Task>
			}
			SCH_Delete_Task(0);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff38 	bl	80006b8 <SCH_Delete_Task>
		while (numOfTasks > 0 && SCH_tasks_G[0].delay == 0)
 8000848:	4b33      	ldr	r3, [pc, #204]	; (8000918 <SCH_Dispatch_Tasks+0x110>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d003      	beq.n	8000858 <SCH_Dispatch_Tasks+0x50>
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0db      	beq.n	8000810 <SCH_Dispatch_Tasks+0x8>
		}

		// Compensate the for "jitter" times by reducing the "delay" attribute of
		// the remaining tasks
		if (numOfTasks > 0)
 8000858:	4b2f      	ldr	r3, [pc, #188]	; (8000918 <SCH_Dispatch_Tasks+0x110>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d049      	beq.n	80008f4 <SCH_Dispatch_Tasks+0xec>
		{
			for (uint8_t i = 0; i < numOfTasks; ++i)
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	e041      	b.n	80008ea <SCH_Dispatch_Tasks+0xe2>
			{
				if (jitterTimes > SCH_tasks_G[i].delay)
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	492a      	ldr	r1, [pc, #168]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 800086a:	4613      	mov	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	4413      	add	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	440b      	add	r3, r1
 8000874:	3304      	adds	r3, #4
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b28      	ldr	r3, [pc, #160]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d218      	bcs.n	80008b2 <SCH_Dispatch_Tasks+0xaa>
				{
					jitterTimes -= SCH_tasks_G[i].delay;
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	79fa      	ldrb	r2, [r7, #7]
 8000886:	4823      	ldr	r0, [pc, #140]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4403      	add	r3, r0
 8000892:	3304      	adds	r3, #4
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1acb      	subs	r3, r1, r3
 8000898:	4a20      	ldr	r2, [pc, #128]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 800089a:	6013      	str	r3, [r2, #0]
					SCH_tasks_G[i].delay = 0;
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	491d      	ldr	r1, [pc, #116]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	440b      	add	r3, r1
 80008aa:	3304      	adds	r3, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e018      	b.n	80008e4 <SCH_Dispatch_Tasks+0xdc>
				}else
				{
					SCH_tasks_G[i].delay -= jitterTimes;
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	4917      	ldr	r1, [pc, #92]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 80008b6:	4613      	mov	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	4413      	add	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	440b      	add	r3, r1
 80008c0:	3304      	adds	r3, #4
 80008c2:	6819      	ldr	r1, [r3, #0]
 80008c4:	4b15      	ldr	r3, [pc, #84]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	79fa      	ldrb	r2, [r7, #7]
 80008ca:	1ac9      	subs	r1, r1, r3
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <SCH_Dispatch_Tasks+0x10c>)
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	4403      	add	r3, r0
 80008d8:	3304      	adds	r3, #4
 80008da:	6019      	str	r1, [r3, #0]
					jitterTimes = 0;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
					break;
 80008e2:	e007      	b.n	80008f4 <SCH_Dispatch_Tasks+0xec>
			for (uint8_t i = 0; i < numOfTasks; ++i)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	3301      	adds	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <SCH_Dispatch_Tasks+0x110>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	79fa      	ldrb	r2, [r7, #7]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d3b8      	bcc.n	8000866 <SCH_Dispatch_Tasks+0x5e>
				}
			}
		}
	}while (jitterTimes > 0 && numOfTasks > 0);
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <SCH_Dispatch_Tasks+0x114>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d003      	beq.n	8000904 <SCH_Dispatch_Tasks+0xfc>
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <SCH_Dispatch_Tasks+0x110>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1a1      	bne.n	8000848 <SCH_Dispatch_Tasks+0x40>

	SCH_Report_Status();
 8000904:	f7ff fe9c 	bl	8000640 <SCH_Report_Status>
	SCH_Go_To_Sleep();
 8000908:	f7ff fea0 	bl	800064c <SCH_Go_To_Sleep>
}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000012c 	.word	0x2000012c
 8000918:	200001a4 	.word	0x200001a4
 800091c:	200001a8 	.word	0x200001a8

08000920 <SCH_Add_Task>:

// delay and period parameter is in ms unit
uint32_t SCH_Add_Task(void (*pFunction)(void), uint32_t delay, uint32_t period)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
	// execute immediately
	if (delay == 0)
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10c      	bne.n	800094c <SCH_Add_Task+0x2c>
	{
		(*pFunction)();
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	4798      	blx	r3
		if (period > 0)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 80cd 	beq.w	8000ad8 <SCH_Add_Task+0x1b8>
		{
			return SCH_Add_Task(pFunction, period, period);
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f7ff ffec 	bl	8000920 <SCH_Add_Task>
 8000948:	4603      	mov	r3, r0
 800094a:	e0c6      	b.n	8000ada <SCH_Add_Task+0x1ba>
		}
	}else
	{
		delay /= TICK_DURATION;
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	4a65      	ldr	r2, [pc, #404]	; (8000ae4 <SCH_Add_Task+0x1c4>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	60bb      	str	r3, [r7, #8]
		period /= TICK_DURATION;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <SCH_Add_Task+0x1c4>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	607b      	str	r3, [r7, #4]

		if (numOfTasks < SCH_MAX_TASKS)
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b09      	cmp	r3, #9
 800096a:	f200 80b5 	bhi.w	8000ad8 <SCH_Add_Task+0x1b8>
		{
			uint32_t curSumDelay = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
			uint8_t insertPosition = numOfTasks;
 8000972:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	74fb      	strb	r3, [r7, #19]

			for (uint8_t i = 0; i < numOfTasks; ++i)
 8000978:	2300      	movs	r3, #0
 800097a:	74bb      	strb	r3, [r7, #18]
 800097c:	e015      	b.n	80009aa <SCH_Add_Task+0x8a>
			{
				curSumDelay += SCH_tasks_G[i].delay;
 800097e:	7cba      	ldrb	r2, [r7, #18]
 8000980:	495a      	ldr	r1, [pc, #360]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	3304      	adds	r3, #4
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	4413      	add	r3, r2
 8000994:	617b      	str	r3, [r7, #20]
				if (curSumDelay > delay)
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	429a      	cmp	r2, r3
 800099c:	d902      	bls.n	80009a4 <SCH_Add_Task+0x84>
				{
					insertPosition = i;
 800099e:	7cbb      	ldrb	r3, [r7, #18]
 80009a0:	74fb      	strb	r3, [r7, #19]
					break;
 80009a2:	e007      	b.n	80009b4 <SCH_Add_Task+0x94>
			for (uint8_t i = 0; i < numOfTasks; ++i)
 80009a4:	7cbb      	ldrb	r3, [r7, #18]
 80009a6:	3301      	adds	r3, #1
 80009a8:	74bb      	strb	r3, [r7, #18]
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	7cba      	ldrb	r2, [r7, #18]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d3e4      	bcc.n	800097e <SCH_Add_Task+0x5e>
				}
			}

			// If the new task is not added at the end of the array
			if (insertPosition != numOfTasks)
 80009b4:	4b4c      	ldr	r3, [pc, #304]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	7cfa      	ldrb	r2, [r7, #19]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d065      	beq.n	8000a8a <SCH_Add_Task+0x16a>
			{
				curSumDelay -= SCH_tasks_G[insertPosition].delay;
 80009be:	7cfa      	ldrb	r2, [r7, #19]
 80009c0:	494a      	ldr	r1, [pc, #296]	; (8000aec <SCH_Add_Task+0x1cc>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3304      	adds	r3, #4
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	1ad3      	subs	r3, r2, r3
 80009d4:	617b      	str	r3, [r7, #20]
				for (uint8_t i = numOfTasks; i > insertPosition; --i)
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	747b      	strb	r3, [r7, #17]
 80009dc:	e039      	b.n	8000a52 <SCH_Add_Task+0x132>
				{
					SCH_tasks_G[i].delay = SCH_tasks_G[i - 1].delay;
 80009de:	7c7b      	ldrb	r3, [r7, #17]
 80009e0:	1e59      	subs	r1, r3, #1
 80009e2:	7c7a      	ldrb	r2, [r7, #17]
 80009e4:	4841      	ldr	r0, [pc, #260]	; (8000aec <SCH_Add_Task+0x1cc>)
 80009e6:	460b      	mov	r3, r1
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	440b      	add	r3, r1
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4403      	add	r3, r0
 80009f0:	3304      	adds	r3, #4
 80009f2:	6819      	ldr	r1, [r3, #0]
 80009f4:	483d      	ldr	r0, [pc, #244]	; (8000aec <SCH_Add_Task+0x1cc>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4403      	add	r3, r0
 8000a00:	3304      	adds	r3, #4
 8000a02:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].period = SCH_tasks_G[i - 1].period;
 8000a04:	7c7b      	ldrb	r3, [r7, #17]
 8000a06:	1e59      	subs	r1, r3, #1
 8000a08:	7c7a      	ldrb	r2, [r7, #17]
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	440b      	add	r3, r1
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4403      	add	r3, r0
 8000a16:	3308      	adds	r3, #8
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	4834      	ldr	r0, [pc, #208]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4403      	add	r3, r0
 8000a26:	3308      	adds	r3, #8
 8000a28:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 8000a2a:	7c7b      	ldrb	r3, [r7, #17]
 8000a2c:	1e59      	subs	r1, r3, #1
 8000a2e:	7c7a      	ldrb	r2, [r7, #17]
 8000a30:	482e      	ldr	r0, [pc, #184]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a32:	460b      	mov	r3, r1
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	440b      	add	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4403      	add	r3, r0
 8000a3c:	6819      	ldr	r1, [r3, #0]
 8000a3e:	482b      	ldr	r0, [pc, #172]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4403      	add	r3, r0
 8000a4a:	6019      	str	r1, [r3, #0]
				for (uint8_t i = numOfTasks; i > insertPosition; --i)
 8000a4c:	7c7b      	ldrb	r3, [r7, #17]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	747b      	strb	r3, [r7, #17]
 8000a52:	7c7a      	ldrb	r2, [r7, #17]
 8000a54:	7cfb      	ldrb	r3, [r7, #19]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d8c1      	bhi.n	80009de <SCH_Add_Task+0xbe>
				}
				// Subtract the new task's delay from its successor
				SCH_tasks_G[insertPosition + 1].delay -= (delay - curSumDelay);
 8000a5a:	7cfb      	ldrb	r3, [r7, #19]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	4923      	ldr	r1, [pc, #140]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	440b      	add	r3, r1
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	6819      	ldr	r1, [r3, #0]
 8000a6e:	697a      	ldr	r2, [r7, #20]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	7cfa      	ldrb	r2, [r7, #19]
 8000a76:	3201      	adds	r2, #1
 8000a78:	4419      	add	r1, r3
 8000a7a:	481c      	ldr	r0, [pc, #112]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4403      	add	r3, r0
 8000a86:	3304      	adds	r3, #4
 8000a88:	6019      	str	r1, [r3, #0]
			}

			SCH_tasks_G[insertPosition].delay = delay - curSumDelay;
 8000a8a:	7cfa      	ldrb	r2, [r7, #19]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	1ac9      	subs	r1, r1, r3
 8000a92:	4816      	ldr	r0, [pc, #88]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000a94:	4613      	mov	r3, r2
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	4413      	add	r3, r2
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	4403      	add	r3, r0
 8000a9e:	3304      	adds	r3, #4
 8000aa0:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[insertPosition].period = period;
 8000aa2:	7cfa      	ldrb	r2, [r7, #19]
 8000aa4:	4911      	ldr	r1, [pc, #68]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	440b      	add	r3, r1
 8000ab0:	3308      	adds	r3, #8
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[insertPosition].pTask = pFunction;
 8000ab6:	7cfa      	ldrb	r2, [r7, #19]
 8000ab8:	490c      	ldr	r1, [pc, #48]	; (8000aec <SCH_Add_Task+0x1cc>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	601a      	str	r2, [r3, #0]
			++numOfTasks;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SCH_Add_Task+0x1c8>)
 8000ad2:	701a      	strb	r2, [r3, #0]

			return insertPosition;
 8000ad4:	7cfb      	ldrb	r3, [r7, #19]
 8000ad6:	e000      	b.n	8000ada <SCH_Add_Task+0x1ba>
		}
	}

	// Can not add a new task
	return SCH_MAX_TASKS;
 8000ad8:	230a      	movs	r3, #10
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	cccccccd 	.word	0xcccccccd
 8000ae8:	200001a4 	.word	0x200001a4
 8000aec:	2000012c 	.word	0x2000012c

08000af0 <SCH_Find_Task>:

// Get index of a task based on the respective function pointer
uint8_t SCH_Find_Task(void (*pFunction)(void))
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < SCH_MAX_TASKS; ++i)
 8000af8:	2300      	movs	r3, #0
 8000afa:	73fb      	strb	r3, [r7, #15]
 8000afc:	e00f      	b.n	8000b1e <SCH_Find_Task+0x2e>
	{
		if (SCH_tasks_G[i].pTask == pFunction)
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	490b      	ldr	r1, [pc, #44]	; (8000b30 <SCH_Find_Task+0x40>)
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d101      	bne.n	8000b18 <SCH_Find_Task+0x28>
		{
			return i;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	e006      	b.n	8000b26 <SCH_Find_Task+0x36>
	for (uint8_t i = 0; i < SCH_MAX_TASKS; ++i)
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	2b09      	cmp	r3, #9
 8000b22:	d9ec      	bls.n	8000afe <SCH_Find_Task+0xe>
		}
	}

	// SCH_MAX_TASKS return value means the given task hasn't been added yet
	return SCH_MAX_TASKS;
 8000b24:	230a      	movs	r3, #10
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	2000012c 	.word	0x2000012c

08000b34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d106      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		++display_counter;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b50:	6013      	str	r3, [r2, #0]
		SCH_Update();
 8000b52:	f7ff fd97 	bl	8000684 <SCH_Update>
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000098 	.word	0x20000098
 8000b64:	20000128 	.word	0x20000128

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	61d3      	str	r3, [r2, #28]
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_MspInit+0x40>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bbc:	d113      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	61d3      	str	r3, [r2, #28]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_TIM_Base_MspInit+0x44>)
 8000bcc:	69db      	ldr	r3, [r3, #28]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	201c      	movs	r0, #28
 8000bdc:	f000 fa35 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be0:	201c      	movs	r0, #28
 8000be2:	f000 fa4e 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <HAL_UART_MspInit+0x9c>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d139      	bne.n	8000c88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a1e      	ldr	r2, [pc, #120]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_UART_MspInit+0xa0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	480f      	ldr	r0, [pc, #60]	; (8000c98 <HAL_UART_MspInit+0xa4>)
 8000c5a:	f000 fadf 	bl	800121c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	4619      	mov	r1, r3
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <HAL_UART_MspInit+0xa4>)
 8000c74:	f000 fad2 	bl	800121c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2025      	movs	r0, #37	; 0x25
 8000c7e:	f000 f9e4 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c82:	2025      	movs	r0, #37	; 0x25
 8000c84:	f000 f9fd 	bl	8001082 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40010800 	.word	0x40010800

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <NMI_Handler+0x4>

08000ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f8bf 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f001 f903 	bl	8001efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000098 	.word	0x20000098

08000d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART1_IRQHandler+0x10>)
 8000d06:	f001 fd19 	bl	800273c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000e0 	.word	0x200000e0

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f002 fa4a 	bl	80031dc <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20002800 	.word	0x20002800
 8000d74:	00000400 	.word	0x00000400
 8000d78:	200001ac 	.word	0x200001ac
 8000d7c:	200001c8 	.word	0x200001c8

08000d80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff fff8 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d92:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d94:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da8:	4c09      	ldr	r4, [pc, #36]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 fa17 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fa43 	bl	8000244 <main>
  bx lr
 8000dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dc8:	08003c04 	.word	0x08003c04
  ldr r2, =_sbss
 8000dcc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd0:	200001c4 	.word	0x200001c4

08000dd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_2_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <HAL_Init+0x28>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <HAL_Init+0x28>)
 8000de2:	f043 0310 	orr.w	r3, r3, #16
 8000de6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f923 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dee:	200f      	movs	r0, #15
 8000df0:	f000 f808 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df4:	f7ff feb8 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_InitTick+0x54>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <HAL_InitTick+0x58>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	4619      	mov	r1, r3
 8000e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f93b 	bl	800109e <HAL_SYSTICK_Config>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00e      	b.n	8000e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d80a      	bhi.n	8000e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f000 f903 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4a06      	ldr	r2, [pc, #24]	; (8000e60 <HAL_InitTick+0x5c>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	200001b0 	.word	0x200001b0

08000e88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr
 8000e98:	200001b0 	.word	0x200001b0

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <__NVIC_EnableIRQ+0x34>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	db0a      	blt.n	8000f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	490c      	ldr	r1, [pc, #48]	; (8000f84 <__NVIC_SetPriority+0x4c>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	0112      	lsls	r2, r2, #4
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f60:	e00a      	b.n	8000f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	4908      	ldr	r1, [pc, #32]	; (8000f88 <__NVIC_SetPriority+0x50>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	3b04      	subs	r3, #4
 8000f70:	0112      	lsls	r2, r2, #4
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	440b      	add	r3, r1
 8000f76:	761a      	strb	r2, [r3, #24]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f1c3 0307 	rsb	r3, r3, #7
 8000fa6:	2b04      	cmp	r3, #4
 8000fa8:	bf28      	it	cs
 8000faa:	2304      	movcs	r3, #4
 8000fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	2b06      	cmp	r3, #6
 8000fb4:	d902      	bls.n	8000fbc <NVIC_EncodePriority+0x30>
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3b03      	subs	r3, #3
 8000fba:	e000      	b.n	8000fbe <NVIC_EncodePriority+0x32>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	401a      	ands	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	fa01 f303 	lsl.w	r3, r1, r3
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	4313      	orrs	r3, r2
         );
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3724      	adds	r7, #36	; 0x24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff90 	bl	8000f38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff2d 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff42 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff90 	bl	8000f8c <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5f 	bl	8000f38 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff35 	bl	8000f00 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d008      	beq.n	80010e0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2204      	movs	r2, #4
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e020      	b.n	8001122 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 020e 	bic.w	r2, r2, #14
 80010ee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001108:	2101      	movs	r1, #1
 800110a:	fa01 f202 	lsl.w	r2, r1, r2
 800110e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d005      	beq.n	8001150 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	73fb      	strb	r3, [r7, #15]
 800114e:	e051      	b.n	80011f4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 020e 	bic.w	r2, r2, #14
 800115e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0201 	bic.w	r2, r2, #1
 800116e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <HAL_DMA_Abort_IT+0xd4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d029      	beq.n	80011ce <HAL_DMA_Abort_IT+0xa2>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_DMA_Abort_IT+0xd8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d022      	beq.n	80011ca <HAL_DMA_Abort_IT+0x9e>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_DMA_Abort_IT+0xdc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01a      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x98>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_DMA_Abort_IT+0xe0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d012      	beq.n	80011be <HAL_DMA_Abort_IT+0x92>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_DMA_Abort_IT+0xe4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00a      	beq.n	80011b8 <HAL_DMA_Abort_IT+0x8c>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_DMA_Abort_IT+0xe8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d102      	bne.n	80011b2 <HAL_DMA_Abort_IT+0x86>
 80011ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011b0:	e00e      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011b6:	e00b      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011bc:	e008      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c2:	e005      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c8:	e002      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011ca:	2310      	movs	r3, #16
 80011cc:	e000      	b.n	80011d0 <HAL_DMA_Abort_IT+0xa4>
 80011ce:	2301      	movs	r3, #1
 80011d0:	4a11      	ldr	r2, [pc, #68]	; (8001218 <HAL_DMA_Abort_IT+0xec>)
 80011d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	4798      	blx	r3
    } 
  }
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40020008 	.word	0x40020008
 8001204:	4002001c 	.word	0x4002001c
 8001208:	40020030 	.word	0x40020030
 800120c:	40020044 	.word	0x40020044
 8001210:	40020058 	.word	0x40020058
 8001214:	4002006c 	.word	0x4002006c
 8001218:	40020000 	.word	0x40020000

0800121c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800121c:	b480      	push	{r7}
 800121e:	b08b      	sub	sp, #44	; 0x2c
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122e:	e161      	b.n	80014f4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001230:	2201      	movs	r2, #1
 8001232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8150 	bne.w	80014ee <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	4a97      	ldr	r2, [pc, #604]	; (80014b0 <HAL_GPIO_Init+0x294>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d05e      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001258:	4a95      	ldr	r2, [pc, #596]	; (80014b0 <HAL_GPIO_Init+0x294>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d875      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800125e:	4a95      	ldr	r2, [pc, #596]	; (80014b4 <HAL_GPIO_Init+0x298>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d058      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001264:	4a93      	ldr	r2, [pc, #588]	; (80014b4 <HAL_GPIO_Init+0x298>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d86f      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800126a:	4a93      	ldr	r2, [pc, #588]	; (80014b8 <HAL_GPIO_Init+0x29c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d052      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001270:	4a91      	ldr	r2, [pc, #580]	; (80014b8 <HAL_GPIO_Init+0x29c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d869      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001276:	4a91      	ldr	r2, [pc, #580]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d04c      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 800127c:	4a8f      	ldr	r2, [pc, #572]	; (80014bc <HAL_GPIO_Init+0x2a0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d863      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001282:	4a8f      	ldr	r2, [pc, #572]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d046      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
 8001288:	4a8d      	ldr	r2, [pc, #564]	; (80014c0 <HAL_GPIO_Init+0x2a4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d85d      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 800128e:	2b12      	cmp	r3, #18
 8001290:	d82a      	bhi.n	80012e8 <HAL_GPIO_Init+0xcc>
 8001292:	2b12      	cmp	r3, #18
 8001294:	d859      	bhi.n	800134a <HAL_GPIO_Init+0x12e>
 8001296:	a201      	add	r2, pc, #4	; (adr r2, 800129c <HAL_GPIO_Init+0x80>)
 8001298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129c:	08001317 	.word	0x08001317
 80012a0:	080012f1 	.word	0x080012f1
 80012a4:	08001303 	.word	0x08001303
 80012a8:	08001345 	.word	0x08001345
 80012ac:	0800134b 	.word	0x0800134b
 80012b0:	0800134b 	.word	0x0800134b
 80012b4:	0800134b 	.word	0x0800134b
 80012b8:	0800134b 	.word	0x0800134b
 80012bc:	0800134b 	.word	0x0800134b
 80012c0:	0800134b 	.word	0x0800134b
 80012c4:	0800134b 	.word	0x0800134b
 80012c8:	0800134b 	.word	0x0800134b
 80012cc:	0800134b 	.word	0x0800134b
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	0800134b 	.word	0x0800134b
 80012d8:	0800134b 	.word	0x0800134b
 80012dc:	0800134b 	.word	0x0800134b
 80012e0:	080012f9 	.word	0x080012f9
 80012e4:	0800130d 	.word	0x0800130d
 80012e8:	4a76      	ldr	r2, [pc, #472]	; (80014c4 <HAL_GPIO_Init+0x2a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d013      	beq.n	8001316 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ee:	e02c      	b.n	800134a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e029      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	3304      	adds	r3, #4
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e024      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	3308      	adds	r3, #8
 8001308:	623b      	str	r3, [r7, #32]
          break;
 800130a:	e01f      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	330c      	adds	r3, #12
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	e01a      	b.n	800134c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131e:	2304      	movs	r3, #4
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e013      	b.n	800134c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d105      	bne.n	8001338 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800132c:	2308      	movs	r3, #8
 800132e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	611a      	str	r2, [r3, #16]
          break;
 8001336:	e009      	b.n	800134c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	615a      	str	r2, [r3, #20]
          break;
 8001342:	e003      	b.n	800134c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e000      	b.n	800134c <HAL_GPIO_Init+0x130>
          break;
 800134a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	2bff      	cmp	r3, #255	; 0xff
 8001350:	d801      	bhi.n	8001356 <HAL_GPIO_Init+0x13a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	e001      	b.n	800135a <HAL_GPIO_Init+0x13e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	2bff      	cmp	r3, #255	; 0xff
 8001360:	d802      	bhi.n	8001368 <HAL_GPIO_Init+0x14c>
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x152>
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	3b08      	subs	r3, #8
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	210f      	movs	r1, #15
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	6a39      	ldr	r1, [r7, #32]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	431a      	orrs	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80a9 	beq.w	80014ee <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_GPIO_Init+0x2ac>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013b4:	4a45      	ldr	r2, [pc, #276]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4013      	ands	r3, r2
 80013d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a3d      	ldr	r2, [pc, #244]	; (80014d0 <HAL_GPIO_Init+0x2b4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1e0>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3c      	ldr	r2, [pc, #240]	; (80014d4 <HAL_GPIO_Init+0x2b8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1dc>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <HAL_GPIO_Init+0x2bc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1d8>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f4:	2303      	movs	r3, #3
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1e2>
 80013fc:	2300      	movs	r3, #0
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800140e:	492f      	ldr	r1, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x2b0>)
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	492b      	ldr	r1, [pc, #172]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	608b      	str	r3, [r1, #8]
 8001434:	e006      	b.n	8001444 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	43db      	mvns	r3, r3
 800143e:	4927      	ldr	r1, [pc, #156]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001440:	4013      	ands	r3, r2
 8001442:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d006      	beq.n	800145e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	4921      	ldr	r1, [pc, #132]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	43db      	mvns	r3, r3
 8001466:	491d      	ldr	r1, [pc, #116]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001468:	4013      	ands	r3, r2
 800146a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4917      	ldr	r1, [pc, #92]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	43db      	mvns	r3, r3
 800148e:	4913      	ldr	r1, [pc, #76]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 8001490:	4013      	ands	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01f      	beq.n	80014e0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	490d      	ldr	r1, [pc, #52]	; (80014dc <HAL_GPIO_Init+0x2c0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e01f      	b.n	80014ee <HAL_GPIO_Init+0x2d2>
 80014ae:	bf00      	nop
 80014b0:	10320000 	.word	0x10320000
 80014b4:	10310000 	.word	0x10310000
 80014b8:	10220000 	.word	0x10220000
 80014bc:	10210000 	.word	0x10210000
 80014c0:	10120000 	.word	0x10120000
 80014c4:	10110000 	.word	0x10110000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40010800 	.word	0x40010800
 80014d4:	40010c00 	.word	0x40010c00
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	4909      	ldr	r1, [pc, #36]	; (8001510 <HAL_GPIO_Init+0x2f4>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	3301      	adds	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fa:	fa22 f303 	lsr.w	r3, r2, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f47f ae96 	bne.w	8001230 <HAL_GPIO_Init+0x14>
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	372c      	adds	r7, #44	; 0x2c
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800152c:	2301      	movs	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	e001      	b.n	8001536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001536:	7bfb      	ldrb	r3, [r7, #15]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	807b      	strh	r3, [r7, #2]
 800154e:	4613      	mov	r3, r2
 8001550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001558:	887a      	ldrh	r2, [r7, #2]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800155e:	e003      	b.n	8001568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001560:	887b      	ldrh	r3, [r7, #2]
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43d9      	mvns	r1, r3
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	400b      	ands	r3, r1
 8001594:	431a      	orrs	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	611a      	str	r2, [r3, #16]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e272      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8087 	beq.w	80016d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c4:	4b92      	ldr	r3, [pc, #584]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d00c      	beq.n	80015ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d112      	bne.n	8001602 <HAL_RCC_OscConfig+0x5e>
 80015dc:	4b8c      	ldr	r3, [pc, #560]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d10b      	bne.n	8001602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ea:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x12c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d168      	bne.n	80016d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e24c      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x76>
 800160c:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a7f      	ldr	r2, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e02e      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a77      	ldr	r2, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e01d      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0xbc>
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001660:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a67      	ldr	r2, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fc02 	bl	8000e88 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fbfe 	bl	8000e88 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e200      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0xe4>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fbee 	bl	8000e88 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fbea 	bl	8000e88 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1ec      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x10c>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d063      	beq.n	80017a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016de:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d11c      	bne.n	8001730 <HAL_RCC_OscConfig+0x18c>
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d116      	bne.n	8001730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1c0      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4939      	ldr	r1, [pc, #228]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	e03a      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fba3 	bl	8000e88 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fb9f 	bl	8000e88 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e1a1      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4927      	ldr	r1, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb82 	bl	8000e88 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fb7e 	bl	8000e88 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e180      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d03a      	beq.n	8001828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d019      	beq.n	80017ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fb62 	bl	8000e88 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fb5e 	bl	8000e88 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e160      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f000 face 	bl	8001d88 <RCC_Delay>
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff fb48 	bl	8000e88 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	e00f      	b.n	800181c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fb44 	bl	8000e88 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d908      	bls.n	800181c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e146      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	42420000 	.word	0x42420000
 8001818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4b92      	ldr	r3, [pc, #584]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e9      	bne.n	80017fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a6 	beq.w	8001982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b8b      	ldr	r3, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10d      	bne.n	8001862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b88      	ldr	r3, [pc, #544]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a87      	ldr	r2, [pc, #540]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b82      	ldr	r3, [pc, #520]	; (8001a6c <HAL_RCC_OscConfig+0x4c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b7f      	ldr	r3, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x4c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7e      	ldr	r2, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x4c8>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fb05 	bl	8000e88 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff fb01 	bl	8000e88 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e103      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b75      	ldr	r3, [pc, #468]	; (8001a6c <HAL_RCC_OscConfig+0x4c8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x312>
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e02d      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x334>
 80018be:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a69      	ldr	r2, [pc, #420]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4b67      	ldr	r3, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a66      	ldr	r2, [pc, #408]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	e01c      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d10c      	bne.n	80018fa <HAL_RCC_OscConfig+0x356>
 80018e0:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a60      	ldr	r2, [pc, #384]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a5d      	ldr	r2, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e00b      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a5a      	ldr	r2, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d015      	beq.n	8001946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fab5 	bl	8000e88 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fab1 	bl	8000e88 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0b1      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	4b4b      	ldr	r3, [pc, #300]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ee      	beq.n	8001922 <HAL_RCC_OscConfig+0x37e>
 8001944:	e014      	b.n	8001970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff fa9f 	bl	8000e88 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fa9b 	bl	8000e88 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e09b      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ee      	bne.n	800194e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8087 	beq.w	8001a9a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d061      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d146      	bne.n	8001a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x4cc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fa6f 	bl	8000e88 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff fa6b 	bl	8000e88 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e06d      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	4b29      	ldr	r3, [pc, #164]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d6:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4921      	ldr	r1, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a19      	ldr	r1, [r3, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	430b      	orrs	r3, r1
 80019fa:	491b      	ldr	r1, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x4cc>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fa3f 	bl	8000e88 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fa3b 	bl	8000e88 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e03d      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46a>
 8001a2c:	e035      	b.n	8001a9a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x4cc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fa28 	bl	8000e88 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fa24 	bl	8000e88 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e026      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x498>
 8001a5a:	e01e      	b.n	8001a9a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e019      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
 8001a70:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x500>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0d0      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d910      	bls.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4965      	ldr	r1, [pc, #404]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0b8      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	4a58      	ldr	r2, [pc, #352]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4a52      	ldr	r2, [pc, #328]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	494d      	ldr	r1, [pc, #308]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d040      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e07f      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e073      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e06b      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b86:	4b39      	ldr	r3, [pc, #228]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f023 0203 	bic.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4936      	ldr	r1, [pc, #216]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f976 	bl	8000e88 <HAL_GetTick>
 8001b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba0:	f7ff f972 	bl	8000e88 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e053      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 020c 	and.w	r2, r3, #12
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d1eb      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4922      	ldr	r1, [pc, #136]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e032      	b.n	8001c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4916      	ldr	r1, [pc, #88]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c36:	f000 f821 	bl	8001c7c <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490a      	ldr	r1, [pc, #40]	; (8001c70 <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1cc>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_ClockConfig+0x1d0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f8d4 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40022000 	.word	0x40022000
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003b9c 	.word	0x08003b9c
 8001c74:	20000004 	.word	0x20000004
 8001c78:	20000008 	.word	0x20000008

08001c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c96:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x30>
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x36>
 8001caa:	e027      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cae:	613b      	str	r3, [r7, #16]
      break;
 8001cb0:	e027      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	0c9b      	lsrs	r3, r3, #18
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
 8001cbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d010      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0c5b      	lsrs	r3, r3, #17
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd6:	5cd3      	ldrb	r3, [r2, r3]
 8001cd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cde:	fb03 f202 	mul.w	r2, r3, r2
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e004      	b.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a0c      	ldr	r2, [pc, #48]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	613b      	str	r3, [r7, #16]
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfe:	613b      	str	r3, [r7, #16]
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	693b      	ldr	r3, [r7, #16]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	007a1200 	.word	0x007a1200
 8001d18:	08003bb4 	.word	0x08003bb4
 8001d1c:	08003bc4 	.word	0x08003bc4
 8001d20:	003d0900 	.word	0x003d0900

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr
 8001d34:	20000004 	.word	0x20000004

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d3c:	f7ff fff2 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	4903      	ldr	r1, [pc, #12]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4e:	5ccb      	ldrb	r3, [r1, r3]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08003bac 	.word	0x08003bac

08001d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0adb      	lsrs	r3, r3, #11
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	08003bac 	.word	0x08003bac

08001d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <RCC_Delay+0x34>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <RCC_Delay+0x38>)
 8001d96:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9a:	0a5b      	lsrs	r3, r3, #9
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da4:	bf00      	nop
  }
  while (Delay --);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1e5a      	subs	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f9      	bne.n	8001da4 <RCC_Delay+0x1c>
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e041      	b.n	8001e5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7fe fede 	bl	8000bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2202      	movs	r2, #2
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4610      	mov	r0, r2
 8001e04:	f000 fa6e 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d001      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e035      	b.n	8001ee8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_TIM_Base_Start_IT+0x90>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d009      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0x4e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea6:	d004      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0x4e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_TIM_Base_Start_IT+0x94>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d111      	bne.n	8001ed6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b06      	cmp	r3, #6
 8001ec2:	d010      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed4:	e007      	b.n	8001ee6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00
 8001ef8:	40000400 	.word	0x40000400

08001efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0202 	mvn.w	r2, #2
 8001f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f9b4 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9a7 	bl	800229a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9b6 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0204 	mvn.w	r2, #4
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f98a 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f97d 	bl	800229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f98c 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f960 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f953 	bl	800229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f962 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b10      	cmp	r3, #16
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b10      	cmp	r3, #16
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2208      	movs	r2, #8
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f936 	bl	80022ac <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f929 	bl	800229a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f938 	bl	80022be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0201 	mvn.w	r2, #1
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe fd5a 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b80      	cmp	r3, #128	; 0x80
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fa6b 	bl	8002582 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8fc 	bl	80022d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0220 	mvn.w	r2, #32
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa36 	bl	8002570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e0b4      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x186>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d03e      	beq.n	80021e0 <HAL_TIM_ConfigClockSource+0xd4>
 8002162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002166:	f200 8087 	bhi.w	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 800216a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216e:	f000 8086 	beq.w	800227e <HAL_TIM_ConfigClockSource+0x172>
 8002172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002176:	d87f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d01a      	beq.n	80021b2 <HAL_TIM_ConfigClockSource+0xa6>
 800217c:	2b70      	cmp	r3, #112	; 0x70
 800217e:	d87b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d050      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x11a>
 8002184:	2b60      	cmp	r3, #96	; 0x60
 8002186:	d877      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002188:	2b50      	cmp	r3, #80	; 0x50
 800218a:	d03c      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0xfa>
 800218c:	2b50      	cmp	r3, #80	; 0x50
 800218e:	d873      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d058      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x13a>
 8002194:	2b40      	cmp	r3, #64	; 0x40
 8002196:	d86f      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d064      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 800219c:	2b30      	cmp	r3, #48	; 0x30
 800219e:	d86b      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d060      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021a4:	2b20      	cmp	r3, #32
 80021a6:	d867      	bhi.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d05c      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d05a      	beq.n	8002266 <HAL_TIM_ConfigClockSource+0x15a>
 80021b0:	e062      	b.n	8002278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f000 f95e 	bl	8002482 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	609a      	str	r2, [r3, #8]
      break;
 80021de:	e04f      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	6899      	ldr	r1, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f000 f947 	bl	8002482 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002202:	609a      	str	r2, [r3, #8]
      break;
 8002204:	e03c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f8be 	bl	8002394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2150      	movs	r1, #80	; 0x50
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f915 	bl	800244e <TIM_ITRx_SetConfig>
      break;
 8002224:	e02c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f8dc 	bl	80023f0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2160      	movs	r1, #96	; 0x60
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f905 	bl	800244e <TIM_ITRx_SetConfig>
      break;
 8002244:	e01c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6859      	ldr	r1, [r3, #4]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	f000 f89e 	bl	8002394 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	4618      	mov	r0, r3
 8002260:	f000 f8f5 	bl	800244e <TIM_ITRx_SetConfig>
      break;
 8002264:	e00c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	4610      	mov	r0, r2
 8002272:	f000 f8ec 	bl	800244e <TIM_ITRx_SetConfig>
      break;
 8002276:	e003      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
      break;
 800227c:	e000      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800227e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <TIM_Base_SetConfig+0xa8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x28>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x28>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <TIM_Base_SetConfig+0xac>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1a      	ldr	r2, [pc, #104]	; (800238c <TIM_Base_SetConfig+0xa8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <TIM_Base_SetConfig+0x52>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d003      	beq.n	8002336 <TIM_Base_SetConfig+0x52>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a17      	ldr	r2, [pc, #92]	; (8002390 <TIM_Base_SetConfig+0xac>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d108      	bne.n	8002348 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <TIM_Base_SetConfig+0xa8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d103      	bne.n	800237c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	615a      	str	r2, [r3, #20]
}
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40000400 	.word	0x40000400

08002394 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f023 030a 	bic.w	r3, r3, #10
 80023d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	621a      	str	r2, [r3, #32]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	f023 0210 	bic.w	r2, r3, #16
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800241a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	031b      	lsls	r3, r3, #12
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800242c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]
}
 8002444:	bf00      	nop
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800244e:	b480      	push	{r7}
 8002450:	b085      	sub	sp, #20
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
 8002456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	f043 0307 	orr.w	r3, r3, #7
 8002470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002482:	b480      	push	{r7}
 8002484:	b087      	sub	sp, #28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800249c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	021a      	lsls	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	609a      	str	r2, [r3, #8]
}
 80024b6:	bf00      	nop
 80024b8:	371c      	adds	r7, #28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e041      	b.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4313      	orrs	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d004      	beq.n	8002530 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a10      	ldr	r2, [pc, #64]	; (800256c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10c      	bne.n	800254a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002536:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	4313      	orrs	r3, r2
 8002540:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400

08002570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e042      	b.n	800262c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7fe fb1a 	bl	8000bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2224      	movs	r2, #36	; 0x24
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fd71 	bl	80030c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68da      	ldr	r2, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800260c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	; 0x28
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4613      	mov	r3, r2
 8002642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b20      	cmp	r3, #32
 8002652:	d16d      	bne.n	8002730 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Transmit+0x2c>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e066      	b.n	8002732 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2221      	movs	r2, #33	; 0x21
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002672:	f7fe fc09 	bl	8000e88 <HAL_GetTick>
 8002676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	d108      	bne.n	80026a0 <HAL_UART_Transmit+0x6c>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d104      	bne.n	80026a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	e003      	b.n	80026a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026a8:	e02a      	b.n	8002700 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2200      	movs	r2, #0
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 faf9 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e036      	b.n	8002732 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10b      	bne.n	80026e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	3302      	adds	r3, #2
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	e007      	b.n	80026f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	781a      	ldrb	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	3301      	adds	r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1cf      	bne.n	80026aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2200      	movs	r2, #0
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fac9 	bl	8002cac <UART_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e006      	b.n	8002732 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0ba      	sub	sp, #232	; 0xe8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002762:	2300      	movs	r3, #0
 8002764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800277a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10f      	bne.n	80027a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_UART_IRQHandler+0x66>
 800278e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fbd1 	bl	8002f42 <UART_Receive_IT>
      return;
 80027a0:	e25b      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80027a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80de 	beq.w	8002968 <HAL_UART_IRQHandler+0x22c>
 80027ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80d1 	beq.w	8002968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00b      	beq.n	80027ea <HAL_UART_IRQHandler+0xae>
 80027d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0201 	orr.w	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_UART_IRQHandler+0xd2>
 80027f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d005      	beq.n	800280e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800280e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_UART_IRQHandler+0xf6>
 800281a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d011      	beq.n	8002862 <HAL_UART_IRQHandler+0x126>
 800283e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285a:	f043 0208 	orr.w	r2, r3, #8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 81f2 	beq.w	8002c50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800286c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_UART_IRQHandler+0x14e>
 8002878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb5c 	bl	8002f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_UART_IRQHandler+0x17a>
 80028ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d04f      	beq.n	8002956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fa66 	bl	8002d88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d041      	beq.n	800294e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3314      	adds	r3, #20
 80028d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028d8:	e853 3f00 	ldrex	r3, [r3]
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3314      	adds	r3, #20
 80028f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800290e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1d9      	bne.n	80028ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	4a7e      	ldr	r2, [pc, #504]	; (8002b1c <HAL_UART_IRQHandler+0x3e0>)
 8002924:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fbfe 	bl	800112c <HAL_DMA_Abort_IT>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002940:	4610      	mov	r0, r2
 8002942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	e00e      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f99c 	bl	8002c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800294c:	e00a      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f998 	bl	8002c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002954:	e006      	b.n	8002964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f994 	bl	8002c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002962:	e175      	b.n	8002c50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002964:	bf00      	nop
    return;
 8002966:	e173      	b.n	8002c50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	f040 814f 	bne.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8148 	beq.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8141 	beq.w	8002c10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 80b6 	beq.w	8002b20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8145 	beq.w	8002c54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029d2:	429a      	cmp	r2, r3
 80029d4:	f080 813e 	bcs.w	8002c54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	f000 8088 	beq.w	8002afc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	330c      	adds	r3, #12
 8002a14:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002a18:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a24:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1d9      	bne.n	80029ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a42:	e853 3f00 	ldrex	r3, [r3]
 8002a46:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	3314      	adds	r3, #20
 8002a58:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a64:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e1      	bne.n	8002a38 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3314      	adds	r3, #20
 8002a94:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a98:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a9a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002aa0:	e841 2300 	strex	r3, r2, [r1]
 8002aa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1e3      	bne.n	8002a74 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002acc:	f023 0310 	bic.w	r3, r3, #16
 8002ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ade:	65ba      	str	r2, [r7, #88]	; 0x58
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ae6:	e841 2300 	strex	r3, r2, [r1]
 8002aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e3      	bne.n	8002aba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fadd 	bl	80010b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f8bf 	bl	8002c96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b18:	e09c      	b.n	8002c54 <HAL_UART_IRQHandler+0x518>
 8002b1a:	bf00      	nop
 8002b1c:	08002e4d 	.word	0x08002e4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 808e 	beq.w	8002c58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8089 	beq.w	8002c58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002b6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e3      	bne.n	8002b46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3314      	adds	r3, #20
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3314      	adds	r3, #20
 8002b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e3      	bne.n	8002b7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	330c      	adds	r3, #12
 8002bca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	e853 3f00 	ldrex	r3, [r3]
 8002bd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f023 0310 	bic.w	r3, r3, #16
 8002bda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	330c      	adds	r3, #12
 8002be4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002be8:	61fa      	str	r2, [r7, #28]
 8002bea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bec:	69b9      	ldr	r1, [r7, #24]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	e841 2300 	strex	r3, r2, [r1]
 8002bf4:	617b      	str	r3, [r7, #20]
   return(result);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c06:	4619      	mov	r1, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f844 	bl	8002c96 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c0e:	e023      	b.n	8002c58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d009      	beq.n	8002c30 <HAL_UART_IRQHandler+0x4f4>
 8002c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f923 	bl	8002e74 <UART_Transmit_IT>
    return;
 8002c2e:	e014      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_UART_IRQHandler+0x51e>
 8002c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f962 	bl	8002f12 <UART_EndTransmit_IT>
    return;
 8002c4e:	e004      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
    return;
 8002c50:	bf00      	nop
 8002c52:	e002      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <HAL_UART_IRQHandler+0x51e>
      return;
 8002c58:	bf00      	nop
  }
}
 8002c5a:	37e8      	adds	r7, #232	; 0xe8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	603b      	str	r3, [r7, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbc:	e050      	b.n	8002d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d04c      	beq.n	8002d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ccc:	f7fe f8dc 	bl	8000e88 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d241      	bcs.n	8002d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d04:	e841 2300 	strex	r3, r2, [r1]
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e5      	bne.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3314      	adds	r3, #20
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f023 0301 	bic.w	r3, r3, #1
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3314      	adds	r3, #20
 8002d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d30:	623a      	str	r2, [r7, #32]
 8002d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	69f9      	ldr	r1, [r7, #28]
 8002d36:	6a3a      	ldr	r2, [r7, #32]
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e5      	bne.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00f      	b.n	8002d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	bf0c      	ite	eq
 8002d70:	2301      	moveq	r3, #1
 8002d72:	2300      	movne	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d09f      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3740      	adds	r7, #64	; 0x40
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b095      	sub	sp, #84	; 0x54
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	330c      	adds	r3, #12
 8002dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db0:	643a      	str	r2, [r7, #64]	; 0x40
 8002db2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002db6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e5      	bne.n	8002d90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3314      	adds	r3, #20
 8002de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dec:	e841 2300 	strex	r3, r2, [r1]
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d119      	bne.n	8002e34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f023 0310 	bic.w	r3, r3, #16
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	330c      	adds	r3, #12
 8002e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e20:	61ba      	str	r2, [r7, #24]
 8002e22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e24:	6979      	ldr	r1, [r7, #20]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	e841 2300 	strex	r3, r2, [r1]
 8002e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1e5      	bne.n	8002e00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e42:	bf00      	nop
 8002e44:	3754      	adds	r7, #84	; 0x54
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff ff0c 	bl	8002c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b21      	cmp	r3, #33	; 0x21
 8002e86:	d13e      	bne.n	8002f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d114      	bne.n	8002ebc <UART_Transmit_IT+0x48>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d110      	bne.n	8002ebc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]
 8002eba:	e008      	b.n	8002ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6211      	str	r1, [r2, #32]
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff fe94 	bl	8002c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b08c      	sub	sp, #48	; 0x30
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b22      	cmp	r3, #34	; 0x22
 8002f54:	f040 80ae 	bne.w	80030b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f60:	d117      	bne.n	8002f92 <UART_Receive_IT+0x50>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d113      	bne.n	8002f92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8a:	1c9a      	adds	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f90:	e026      	b.n	8002fe0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d007      	beq.n	8002fb6 <UART_Receive_IT+0x74>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <UART_Receive_IT+0x82>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	701a      	strb	r2, [r3, #0]
 8002fc2:	e008      	b.n	8002fd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4619      	mov	r1, r3
 8002fee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d15d      	bne.n	80030b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0220 	bic.w	r2, r2, #32
 8003002:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695a      	ldr	r2, [r3, #20]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0201 	bic.w	r2, r2, #1
 8003022:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	2b01      	cmp	r3, #1
 8003038:	d135      	bne.n	80030a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	e853 3f00 	ldrex	r3, [r3]
 800304e:	613b      	str	r3, [r7, #16]
   return(result);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f023 0310 	bic.w	r3, r3, #16
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	623a      	str	r2, [r7, #32]
 8003062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003064:	69f9      	ldr	r1, [r7, #28]
 8003066:	6a3a      	ldr	r2, [r7, #32]
 8003068:	e841 2300 	strex	r3, r2, [r1]
 800306c:	61bb      	str	r3, [r7, #24]
   return(result);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e5      	bne.n	8003040 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b10      	cmp	r3, #16
 8003080:	d10a      	bne.n	8003098 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fdf9 	bl	8002c96 <HAL_UARTEx_RxEventCallback>
 80030a4:	e002      	b.n	80030ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fde3 	bl	8002c72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	e002      	b.n	80030b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3730      	adds	r7, #48	; 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030fa:	f023 030c 	bic.w	r3, r3, #12
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6812      	ldr	r2, [r2, #0]
 8003102:	68b9      	ldr	r1, [r7, #8]
 8003104:	430b      	orrs	r3, r1
 8003106:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a2c      	ldr	r2, [pc, #176]	; (80031d4 <UART_SetConfig+0x114>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7fe fe1a 	bl	8001d60 <HAL_RCC_GetPCLK2Freq>
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	e002      	b.n	8003136 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003130:	f7fe fe02 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009a      	lsls	r2, r3, #2
 8003140:	441a      	add	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	4a22      	ldr	r2, [pc, #136]	; (80031d8 <UART_SetConfig+0x118>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	0119      	lsls	r1, r3, #4
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009a      	lsls	r2, r3, #2
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fbb2 f2f3 	udiv	r2, r2, r3
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <UART_SetConfig+0x118>)
 800316e:	fba3 0302 	umull	r0, r3, r3, r2
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2064      	movs	r0, #100	; 0x64
 8003176:	fb00 f303 	mul.w	r3, r0, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	3332      	adds	r3, #50	; 0x32
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800318c:	4419      	add	r1, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009a      	lsls	r2, r3, #2
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <UART_SetConfig+0x118>)
 80031a6:	fba3 0302 	umull	r0, r3, r3, r2
 80031aa:	095b      	lsrs	r3, r3, #5
 80031ac:	2064      	movs	r0, #100	; 0x64
 80031ae:	fb00 f303 	mul.w	r3, r0, r3
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	3332      	adds	r3, #50	; 0x32
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <UART_SetConfig+0x118>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	f003 020f 	and.w	r2, r3, #15
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	440a      	add	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40013800 	.word	0x40013800
 80031d8:	51eb851f 	.word	0x51eb851f

080031dc <__errno>:
 80031dc:	4b01      	ldr	r3, [pc, #4]	; (80031e4 <__errno+0x8>)
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2600      	movs	r6, #0
 80031ec:	4d0c      	ldr	r5, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f000 fc9c 	bl	8003b34 <_init>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4d0a      	ldr	r5, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	08003bfc 	.word	0x08003bfc
 8003224:	08003bfc 	.word	0x08003bfc
 8003228:	08003bfc 	.word	0x08003bfc
 800322c:	08003c00 	.word	0x08003c00

08003230 <memset>:
 8003230:	4603      	mov	r3, r0
 8003232:	4402      	add	r2, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <memset+0xa>
 8003238:	4770      	bx	lr
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	e7f9      	b.n	8003234 <memset+0x4>

08003240 <siprintf>:
 8003240:	b40e      	push	{r1, r2, r3}
 8003242:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003246:	b500      	push	{lr}
 8003248:	b09c      	sub	sp, #112	; 0x70
 800324a:	ab1d      	add	r3, sp, #116	; 0x74
 800324c:	9002      	str	r0, [sp, #8]
 800324e:	9006      	str	r0, [sp, #24]
 8003250:	9107      	str	r1, [sp, #28]
 8003252:	9104      	str	r1, [sp, #16]
 8003254:	4808      	ldr	r0, [pc, #32]	; (8003278 <siprintf+0x38>)
 8003256:	4909      	ldr	r1, [pc, #36]	; (800327c <siprintf+0x3c>)
 8003258:	f853 2b04 	ldr.w	r2, [r3], #4
 800325c:	9105      	str	r1, [sp, #20]
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	a902      	add	r1, sp, #8
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	f000 f868 	bl	8003338 <_svfiprintf_r>
 8003268:	2200      	movs	r2, #0
 800326a:	9b02      	ldr	r3, [sp, #8]
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	b01c      	add	sp, #112	; 0x70
 8003270:	f85d eb04 	ldr.w	lr, [sp], #4
 8003274:	b003      	add	sp, #12
 8003276:	4770      	bx	lr
 8003278:	20000010 	.word	0x20000010
 800327c:	ffff0208 	.word	0xffff0208

08003280 <__ssputs_r>:
 8003280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	688e      	ldr	r6, [r1, #8]
 8003286:	4682      	mov	sl, r0
 8003288:	429e      	cmp	r6, r3
 800328a:	460c      	mov	r4, r1
 800328c:	4690      	mov	r8, r2
 800328e:	461f      	mov	r7, r3
 8003290:	d838      	bhi.n	8003304 <__ssputs_r+0x84>
 8003292:	898a      	ldrh	r2, [r1, #12]
 8003294:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003298:	d032      	beq.n	8003300 <__ssputs_r+0x80>
 800329a:	6825      	ldr	r5, [r4, #0]
 800329c:	6909      	ldr	r1, [r1, #16]
 800329e:	3301      	adds	r3, #1
 80032a0:	eba5 0901 	sub.w	r9, r5, r1
 80032a4:	6965      	ldr	r5, [r4, #20]
 80032a6:	444b      	add	r3, r9
 80032a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032b0:	106d      	asrs	r5, r5, #1
 80032b2:	429d      	cmp	r5, r3
 80032b4:	bf38      	it	cc
 80032b6:	461d      	movcc	r5, r3
 80032b8:	0553      	lsls	r3, r2, #21
 80032ba:	d531      	bpl.n	8003320 <__ssputs_r+0xa0>
 80032bc:	4629      	mov	r1, r5
 80032be:	f000 fb6f 	bl	80039a0 <_malloc_r>
 80032c2:	4606      	mov	r6, r0
 80032c4:	b950      	cbnz	r0, 80032dc <__ssputs_r+0x5c>
 80032c6:	230c      	movs	r3, #12
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f8ca 3000 	str.w	r3, [sl]
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d6:	81a3      	strh	r3, [r4, #12]
 80032d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032dc:	464a      	mov	r2, r9
 80032de:	6921      	ldr	r1, [r4, #16]
 80032e0:	f000 face 	bl	8003880 <memcpy>
 80032e4:	89a3      	ldrh	r3, [r4, #12]
 80032e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ee:	81a3      	strh	r3, [r4, #12]
 80032f0:	6126      	str	r6, [r4, #16]
 80032f2:	444e      	add	r6, r9
 80032f4:	6026      	str	r6, [r4, #0]
 80032f6:	463e      	mov	r6, r7
 80032f8:	6165      	str	r5, [r4, #20]
 80032fa:	eba5 0509 	sub.w	r5, r5, r9
 80032fe:	60a5      	str	r5, [r4, #8]
 8003300:	42be      	cmp	r6, r7
 8003302:	d900      	bls.n	8003306 <__ssputs_r+0x86>
 8003304:	463e      	mov	r6, r7
 8003306:	4632      	mov	r2, r6
 8003308:	4641      	mov	r1, r8
 800330a:	6820      	ldr	r0, [r4, #0]
 800330c:	f000 fac6 	bl	800389c <memmove>
 8003310:	68a3      	ldr	r3, [r4, #8]
 8003312:	2000      	movs	r0, #0
 8003314:	1b9b      	subs	r3, r3, r6
 8003316:	60a3      	str	r3, [r4, #8]
 8003318:	6823      	ldr	r3, [r4, #0]
 800331a:	4433      	add	r3, r6
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	e7db      	b.n	80032d8 <__ssputs_r+0x58>
 8003320:	462a      	mov	r2, r5
 8003322:	f000 fbb1 	bl	8003a88 <_realloc_r>
 8003326:	4606      	mov	r6, r0
 8003328:	2800      	cmp	r0, #0
 800332a:	d1e1      	bne.n	80032f0 <__ssputs_r+0x70>
 800332c:	4650      	mov	r0, sl
 800332e:	6921      	ldr	r1, [r4, #16]
 8003330:	f000 face 	bl	80038d0 <_free_r>
 8003334:	e7c7      	b.n	80032c6 <__ssputs_r+0x46>
	...

08003338 <_svfiprintf_r>:
 8003338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333c:	4698      	mov	r8, r3
 800333e:	898b      	ldrh	r3, [r1, #12]
 8003340:	4607      	mov	r7, r0
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	460d      	mov	r5, r1
 8003346:	4614      	mov	r4, r2
 8003348:	b09d      	sub	sp, #116	; 0x74
 800334a:	d50e      	bpl.n	800336a <_svfiprintf_r+0x32>
 800334c:	690b      	ldr	r3, [r1, #16]
 800334e:	b963      	cbnz	r3, 800336a <_svfiprintf_r+0x32>
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	f000 fb25 	bl	80039a0 <_malloc_r>
 8003356:	6028      	str	r0, [r5, #0]
 8003358:	6128      	str	r0, [r5, #16]
 800335a:	b920      	cbnz	r0, 8003366 <_svfiprintf_r+0x2e>
 800335c:	230c      	movs	r3, #12
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	f04f 30ff 	mov.w	r0, #4294967295
 8003364:	e0d1      	b.n	800350a <_svfiprintf_r+0x1d2>
 8003366:	2340      	movs	r3, #64	; 0x40
 8003368:	616b      	str	r3, [r5, #20]
 800336a:	2300      	movs	r3, #0
 800336c:	9309      	str	r3, [sp, #36]	; 0x24
 800336e:	2320      	movs	r3, #32
 8003370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003374:	2330      	movs	r3, #48	; 0x30
 8003376:	f04f 0901 	mov.w	r9, #1
 800337a:	f8cd 800c 	str.w	r8, [sp, #12]
 800337e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003524 <_svfiprintf_r+0x1ec>
 8003382:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003386:	4623      	mov	r3, r4
 8003388:	469a      	mov	sl, r3
 800338a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338e:	b10a      	cbz	r2, 8003394 <_svfiprintf_r+0x5c>
 8003390:	2a25      	cmp	r2, #37	; 0x25
 8003392:	d1f9      	bne.n	8003388 <_svfiprintf_r+0x50>
 8003394:	ebba 0b04 	subs.w	fp, sl, r4
 8003398:	d00b      	beq.n	80033b2 <_svfiprintf_r+0x7a>
 800339a:	465b      	mov	r3, fp
 800339c:	4622      	mov	r2, r4
 800339e:	4629      	mov	r1, r5
 80033a0:	4638      	mov	r0, r7
 80033a2:	f7ff ff6d 	bl	8003280 <__ssputs_r>
 80033a6:	3001      	adds	r0, #1
 80033a8:	f000 80aa 	beq.w	8003500 <_svfiprintf_r+0x1c8>
 80033ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ae:	445a      	add	r2, fp
 80033b0:	9209      	str	r2, [sp, #36]	; 0x24
 80033b2:	f89a 3000 	ldrb.w	r3, [sl]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a2 	beq.w	8003500 <_svfiprintf_r+0x1c8>
 80033bc:	2300      	movs	r3, #0
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c6:	f10a 0a01 	add.w	sl, sl, #1
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	9307      	str	r3, [sp, #28]
 80033ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033d2:	931a      	str	r3, [sp, #104]	; 0x68
 80033d4:	4654      	mov	r4, sl
 80033d6:	2205      	movs	r2, #5
 80033d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033dc:	4851      	ldr	r0, [pc, #324]	; (8003524 <_svfiprintf_r+0x1ec>)
 80033de:	f000 fa41 	bl	8003864 <memchr>
 80033e2:	9a04      	ldr	r2, [sp, #16]
 80033e4:	b9d8      	cbnz	r0, 800341e <_svfiprintf_r+0xe6>
 80033e6:	06d0      	lsls	r0, r2, #27
 80033e8:	bf44      	itt	mi
 80033ea:	2320      	movmi	r3, #32
 80033ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033f0:	0711      	lsls	r1, r2, #28
 80033f2:	bf44      	itt	mi
 80033f4:	232b      	movmi	r3, #43	; 0x2b
 80033f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033fa:	f89a 3000 	ldrb.w	r3, [sl]
 80033fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003400:	d015      	beq.n	800342e <_svfiprintf_r+0xf6>
 8003402:	4654      	mov	r4, sl
 8003404:	2000      	movs	r0, #0
 8003406:	f04f 0c0a 	mov.w	ip, #10
 800340a:	9a07      	ldr	r2, [sp, #28]
 800340c:	4621      	mov	r1, r4
 800340e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003412:	3b30      	subs	r3, #48	; 0x30
 8003414:	2b09      	cmp	r3, #9
 8003416:	d94e      	bls.n	80034b6 <_svfiprintf_r+0x17e>
 8003418:	b1b0      	cbz	r0, 8003448 <_svfiprintf_r+0x110>
 800341a:	9207      	str	r2, [sp, #28]
 800341c:	e014      	b.n	8003448 <_svfiprintf_r+0x110>
 800341e:	eba0 0308 	sub.w	r3, r0, r8
 8003422:	fa09 f303 	lsl.w	r3, r9, r3
 8003426:	4313      	orrs	r3, r2
 8003428:	46a2      	mov	sl, r4
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	e7d2      	b.n	80033d4 <_svfiprintf_r+0x9c>
 800342e:	9b03      	ldr	r3, [sp, #12]
 8003430:	1d19      	adds	r1, r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	9103      	str	r1, [sp, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfbb      	ittet	lt
 800343a:	425b      	neglt	r3, r3
 800343c:	f042 0202 	orrlt.w	r2, r2, #2
 8003440:	9307      	strge	r3, [sp, #28]
 8003442:	9307      	strlt	r3, [sp, #28]
 8003444:	bfb8      	it	lt
 8003446:	9204      	strlt	r2, [sp, #16]
 8003448:	7823      	ldrb	r3, [r4, #0]
 800344a:	2b2e      	cmp	r3, #46	; 0x2e
 800344c:	d10c      	bne.n	8003468 <_svfiprintf_r+0x130>
 800344e:	7863      	ldrb	r3, [r4, #1]
 8003450:	2b2a      	cmp	r3, #42	; 0x2a
 8003452:	d135      	bne.n	80034c0 <_svfiprintf_r+0x188>
 8003454:	9b03      	ldr	r3, [sp, #12]
 8003456:	3402      	adds	r4, #2
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	9203      	str	r2, [sp, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfb8      	it	lt
 8003462:	f04f 33ff 	movlt.w	r3, #4294967295
 8003466:	9305      	str	r3, [sp, #20]
 8003468:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003528 <_svfiprintf_r+0x1f0>
 800346c:	2203      	movs	r2, #3
 800346e:	4650      	mov	r0, sl
 8003470:	7821      	ldrb	r1, [r4, #0]
 8003472:	f000 f9f7 	bl	8003864 <memchr>
 8003476:	b140      	cbz	r0, 800348a <_svfiprintf_r+0x152>
 8003478:	2340      	movs	r3, #64	; 0x40
 800347a:	eba0 000a 	sub.w	r0, r0, sl
 800347e:	fa03 f000 	lsl.w	r0, r3, r0
 8003482:	9b04      	ldr	r3, [sp, #16]
 8003484:	3401      	adds	r4, #1
 8003486:	4303      	orrs	r3, r0
 8003488:	9304      	str	r3, [sp, #16]
 800348a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348e:	2206      	movs	r2, #6
 8003490:	4826      	ldr	r0, [pc, #152]	; (800352c <_svfiprintf_r+0x1f4>)
 8003492:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003496:	f000 f9e5 	bl	8003864 <memchr>
 800349a:	2800      	cmp	r0, #0
 800349c:	d038      	beq.n	8003510 <_svfiprintf_r+0x1d8>
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <_svfiprintf_r+0x1f8>)
 80034a0:	bb1b      	cbnz	r3, 80034ea <_svfiprintf_r+0x1b2>
 80034a2:	9b03      	ldr	r3, [sp, #12]
 80034a4:	3307      	adds	r3, #7
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	3308      	adds	r3, #8
 80034ac:	9303      	str	r3, [sp, #12]
 80034ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034b0:	4433      	add	r3, r6
 80034b2:	9309      	str	r3, [sp, #36]	; 0x24
 80034b4:	e767      	b.n	8003386 <_svfiprintf_r+0x4e>
 80034b6:	460c      	mov	r4, r1
 80034b8:	2001      	movs	r0, #1
 80034ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80034be:	e7a5      	b.n	800340c <_svfiprintf_r+0xd4>
 80034c0:	2300      	movs	r3, #0
 80034c2:	f04f 0c0a 	mov.w	ip, #10
 80034c6:	4619      	mov	r1, r3
 80034c8:	3401      	adds	r4, #1
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	4620      	mov	r0, r4
 80034ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034d2:	3a30      	subs	r2, #48	; 0x30
 80034d4:	2a09      	cmp	r2, #9
 80034d6:	d903      	bls.n	80034e0 <_svfiprintf_r+0x1a8>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0c5      	beq.n	8003468 <_svfiprintf_r+0x130>
 80034dc:	9105      	str	r1, [sp, #20]
 80034de:	e7c3      	b.n	8003468 <_svfiprintf_r+0x130>
 80034e0:	4604      	mov	r4, r0
 80034e2:	2301      	movs	r3, #1
 80034e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e8:	e7f0      	b.n	80034cc <_svfiprintf_r+0x194>
 80034ea:	ab03      	add	r3, sp, #12
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	462a      	mov	r2, r5
 80034f0:	4638      	mov	r0, r7
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <_svfiprintf_r+0x1fc>)
 80034f4:	a904      	add	r1, sp, #16
 80034f6:	f3af 8000 	nop.w
 80034fa:	1c42      	adds	r2, r0, #1
 80034fc:	4606      	mov	r6, r0
 80034fe:	d1d6      	bne.n	80034ae <_svfiprintf_r+0x176>
 8003500:	89ab      	ldrh	r3, [r5, #12]
 8003502:	065b      	lsls	r3, r3, #25
 8003504:	f53f af2c 	bmi.w	8003360 <_svfiprintf_r+0x28>
 8003508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800350a:	b01d      	add	sp, #116	; 0x74
 800350c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003510:	ab03      	add	r3, sp, #12
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	462a      	mov	r2, r5
 8003516:	4638      	mov	r0, r7
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <_svfiprintf_r+0x1fc>)
 800351a:	a904      	add	r1, sp, #16
 800351c:	f000 f87c 	bl	8003618 <_printf_i>
 8003520:	e7eb      	b.n	80034fa <_svfiprintf_r+0x1c2>
 8003522:	bf00      	nop
 8003524:	08003bc6 	.word	0x08003bc6
 8003528:	08003bcc 	.word	0x08003bcc
 800352c:	08003bd0 	.word	0x08003bd0
 8003530:	00000000 	.word	0x00000000
 8003534:	08003281 	.word	0x08003281

08003538 <_printf_common>:
 8003538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800353c:	4616      	mov	r6, r2
 800353e:	4699      	mov	r9, r3
 8003540:	688a      	ldr	r2, [r1, #8]
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	4607      	mov	r7, r0
 8003546:	4293      	cmp	r3, r2
 8003548:	bfb8      	it	lt
 800354a:	4613      	movlt	r3, r2
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003552:	460c      	mov	r4, r1
 8003554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003558:	b10a      	cbz	r2, 800355e <_printf_common+0x26>
 800355a:	3301      	adds	r3, #1
 800355c:	6033      	str	r3, [r6, #0]
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	0699      	lsls	r1, r3, #26
 8003562:	bf42      	ittt	mi
 8003564:	6833      	ldrmi	r3, [r6, #0]
 8003566:	3302      	addmi	r3, #2
 8003568:	6033      	strmi	r3, [r6, #0]
 800356a:	6825      	ldr	r5, [r4, #0]
 800356c:	f015 0506 	ands.w	r5, r5, #6
 8003570:	d106      	bne.n	8003580 <_printf_common+0x48>
 8003572:	f104 0a19 	add.w	sl, r4, #25
 8003576:	68e3      	ldr	r3, [r4, #12]
 8003578:	6832      	ldr	r2, [r6, #0]
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	42ab      	cmp	r3, r5
 800357e:	dc28      	bgt.n	80035d2 <_printf_common+0x9a>
 8003580:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003584:	1e13      	subs	r3, r2, #0
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	bf18      	it	ne
 800358a:	2301      	movne	r3, #1
 800358c:	0692      	lsls	r2, r2, #26
 800358e:	d42d      	bmi.n	80035ec <_printf_common+0xb4>
 8003590:	4649      	mov	r1, r9
 8003592:	4638      	mov	r0, r7
 8003594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003598:	47c0      	blx	r8
 800359a:	3001      	adds	r0, #1
 800359c:	d020      	beq.n	80035e0 <_printf_common+0xa8>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	68e5      	ldr	r5, [r4, #12]
 80035a2:	f003 0306 	and.w	r3, r3, #6
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	bf18      	it	ne
 80035aa:	2500      	movne	r5, #0
 80035ac:	6832      	ldr	r2, [r6, #0]
 80035ae:	f04f 0600 	mov.w	r6, #0
 80035b2:	68a3      	ldr	r3, [r4, #8]
 80035b4:	bf08      	it	eq
 80035b6:	1aad      	subeq	r5, r5, r2
 80035b8:	6922      	ldr	r2, [r4, #16]
 80035ba:	bf08      	it	eq
 80035bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bfc4      	itt	gt
 80035c4:	1a9b      	subgt	r3, r3, r2
 80035c6:	18ed      	addgt	r5, r5, r3
 80035c8:	341a      	adds	r4, #26
 80035ca:	42b5      	cmp	r5, r6
 80035cc:	d11a      	bne.n	8003604 <_printf_common+0xcc>
 80035ce:	2000      	movs	r0, #0
 80035d0:	e008      	b.n	80035e4 <_printf_common+0xac>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4652      	mov	r2, sl
 80035d6:	4649      	mov	r1, r9
 80035d8:	4638      	mov	r0, r7
 80035da:	47c0      	blx	r8
 80035dc:	3001      	adds	r0, #1
 80035de:	d103      	bne.n	80035e8 <_printf_common+0xb0>
 80035e0:	f04f 30ff 	mov.w	r0, #4294967295
 80035e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035e8:	3501      	adds	r5, #1
 80035ea:	e7c4      	b.n	8003576 <_printf_common+0x3e>
 80035ec:	2030      	movs	r0, #48	; 0x30
 80035ee:	18e1      	adds	r1, r4, r3
 80035f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035fa:	4422      	add	r2, r4
 80035fc:	3302      	adds	r3, #2
 80035fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003602:	e7c5      	b.n	8003590 <_printf_common+0x58>
 8003604:	2301      	movs	r3, #1
 8003606:	4622      	mov	r2, r4
 8003608:	4649      	mov	r1, r9
 800360a:	4638      	mov	r0, r7
 800360c:	47c0      	blx	r8
 800360e:	3001      	adds	r0, #1
 8003610:	d0e6      	beq.n	80035e0 <_printf_common+0xa8>
 8003612:	3601      	adds	r6, #1
 8003614:	e7d9      	b.n	80035ca <_printf_common+0x92>
	...

08003618 <_printf_i>:
 8003618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800361c:	7e0f      	ldrb	r7, [r1, #24]
 800361e:	4691      	mov	r9, r2
 8003620:	2f78      	cmp	r7, #120	; 0x78
 8003622:	4680      	mov	r8, r0
 8003624:	460c      	mov	r4, r1
 8003626:	469a      	mov	sl, r3
 8003628:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800362a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800362e:	d807      	bhi.n	8003640 <_printf_i+0x28>
 8003630:	2f62      	cmp	r7, #98	; 0x62
 8003632:	d80a      	bhi.n	800364a <_printf_i+0x32>
 8003634:	2f00      	cmp	r7, #0
 8003636:	f000 80d9 	beq.w	80037ec <_printf_i+0x1d4>
 800363a:	2f58      	cmp	r7, #88	; 0x58
 800363c:	f000 80a4 	beq.w	8003788 <_printf_i+0x170>
 8003640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003648:	e03a      	b.n	80036c0 <_printf_i+0xa8>
 800364a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800364e:	2b15      	cmp	r3, #21
 8003650:	d8f6      	bhi.n	8003640 <_printf_i+0x28>
 8003652:	a101      	add	r1, pc, #4	; (adr r1, 8003658 <_printf_i+0x40>)
 8003654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036c5 	.word	0x080036c5
 8003660:	08003641 	.word	0x08003641
 8003664:	08003641 	.word	0x08003641
 8003668:	08003641 	.word	0x08003641
 800366c:	08003641 	.word	0x08003641
 8003670:	080036c5 	.word	0x080036c5
 8003674:	08003641 	.word	0x08003641
 8003678:	08003641 	.word	0x08003641
 800367c:	08003641 	.word	0x08003641
 8003680:	08003641 	.word	0x08003641
 8003684:	080037d3 	.word	0x080037d3
 8003688:	080036f5 	.word	0x080036f5
 800368c:	080037b5 	.word	0x080037b5
 8003690:	08003641 	.word	0x08003641
 8003694:	08003641 	.word	0x08003641
 8003698:	080037f5 	.word	0x080037f5
 800369c:	08003641 	.word	0x08003641
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003641 	.word	0x08003641
 80036a8:	08003641 	.word	0x08003641
 80036ac:	080037bd 	.word	0x080037bd
 80036b0:	682b      	ldr	r3, [r5, #0]
 80036b2:	1d1a      	adds	r2, r3, #4
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	602a      	str	r2, [r5, #0]
 80036b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0a4      	b.n	800380e <_printf_i+0x1f6>
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	6829      	ldr	r1, [r5, #0]
 80036c8:	0606      	lsls	r6, r0, #24
 80036ca:	f101 0304 	add.w	r3, r1, #4
 80036ce:	d50a      	bpl.n	80036e6 <_printf_i+0xce>
 80036d0:	680e      	ldr	r6, [r1, #0]
 80036d2:	602b      	str	r3, [r5, #0]
 80036d4:	2e00      	cmp	r6, #0
 80036d6:	da03      	bge.n	80036e0 <_printf_i+0xc8>
 80036d8:	232d      	movs	r3, #45	; 0x2d
 80036da:	4276      	negs	r6, r6
 80036dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036e0:	230a      	movs	r3, #10
 80036e2:	485e      	ldr	r0, [pc, #376]	; (800385c <_printf_i+0x244>)
 80036e4:	e019      	b.n	800371a <_printf_i+0x102>
 80036e6:	680e      	ldr	r6, [r1, #0]
 80036e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ec:	602b      	str	r3, [r5, #0]
 80036ee:	bf18      	it	ne
 80036f0:	b236      	sxthne	r6, r6
 80036f2:	e7ef      	b.n	80036d4 <_printf_i+0xbc>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	1d19      	adds	r1, r3, #4
 80036fa:	6029      	str	r1, [r5, #0]
 80036fc:	0601      	lsls	r1, r0, #24
 80036fe:	d501      	bpl.n	8003704 <_printf_i+0xec>
 8003700:	681e      	ldr	r6, [r3, #0]
 8003702:	e002      	b.n	800370a <_printf_i+0xf2>
 8003704:	0646      	lsls	r6, r0, #25
 8003706:	d5fb      	bpl.n	8003700 <_printf_i+0xe8>
 8003708:	881e      	ldrh	r6, [r3, #0]
 800370a:	2f6f      	cmp	r7, #111	; 0x6f
 800370c:	bf0c      	ite	eq
 800370e:	2308      	moveq	r3, #8
 8003710:	230a      	movne	r3, #10
 8003712:	4852      	ldr	r0, [pc, #328]	; (800385c <_printf_i+0x244>)
 8003714:	2100      	movs	r1, #0
 8003716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800371a:	6865      	ldr	r5, [r4, #4]
 800371c:	2d00      	cmp	r5, #0
 800371e:	bfa8      	it	ge
 8003720:	6821      	ldrge	r1, [r4, #0]
 8003722:	60a5      	str	r5, [r4, #8]
 8003724:	bfa4      	itt	ge
 8003726:	f021 0104 	bicge.w	r1, r1, #4
 800372a:	6021      	strge	r1, [r4, #0]
 800372c:	b90e      	cbnz	r6, 8003732 <_printf_i+0x11a>
 800372e:	2d00      	cmp	r5, #0
 8003730:	d04d      	beq.n	80037ce <_printf_i+0x1b6>
 8003732:	4615      	mov	r5, r2
 8003734:	fbb6 f1f3 	udiv	r1, r6, r3
 8003738:	fb03 6711 	mls	r7, r3, r1, r6
 800373c:	5dc7      	ldrb	r7, [r0, r7]
 800373e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003742:	4637      	mov	r7, r6
 8003744:	42bb      	cmp	r3, r7
 8003746:	460e      	mov	r6, r1
 8003748:	d9f4      	bls.n	8003734 <_printf_i+0x11c>
 800374a:	2b08      	cmp	r3, #8
 800374c:	d10b      	bne.n	8003766 <_printf_i+0x14e>
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	07de      	lsls	r6, r3, #31
 8003752:	d508      	bpl.n	8003766 <_printf_i+0x14e>
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	6861      	ldr	r1, [r4, #4]
 8003758:	4299      	cmp	r1, r3
 800375a:	bfde      	ittt	le
 800375c:	2330      	movle	r3, #48	; 0x30
 800375e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003762:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003766:	1b52      	subs	r2, r2, r5
 8003768:	6122      	str	r2, [r4, #16]
 800376a:	464b      	mov	r3, r9
 800376c:	4621      	mov	r1, r4
 800376e:	4640      	mov	r0, r8
 8003770:	f8cd a000 	str.w	sl, [sp]
 8003774:	aa03      	add	r2, sp, #12
 8003776:	f7ff fedf 	bl	8003538 <_printf_common>
 800377a:	3001      	adds	r0, #1
 800377c:	d14c      	bne.n	8003818 <_printf_i+0x200>
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	b004      	add	sp, #16
 8003784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003788:	4834      	ldr	r0, [pc, #208]	; (800385c <_printf_i+0x244>)
 800378a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800378e:	6829      	ldr	r1, [r5, #0]
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	f851 6b04 	ldr.w	r6, [r1], #4
 8003796:	6029      	str	r1, [r5, #0]
 8003798:	061d      	lsls	r5, r3, #24
 800379a:	d514      	bpl.n	80037c6 <_printf_i+0x1ae>
 800379c:	07df      	lsls	r7, r3, #31
 800379e:	bf44      	itt	mi
 80037a0:	f043 0320 	orrmi.w	r3, r3, #32
 80037a4:	6023      	strmi	r3, [r4, #0]
 80037a6:	b91e      	cbnz	r6, 80037b0 <_printf_i+0x198>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f023 0320 	bic.w	r3, r3, #32
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	2310      	movs	r3, #16
 80037b2:	e7af      	b.n	8003714 <_printf_i+0xfc>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f043 0320 	orr.w	r3, r3, #32
 80037ba:	6023      	str	r3, [r4, #0]
 80037bc:	2378      	movs	r3, #120	; 0x78
 80037be:	4828      	ldr	r0, [pc, #160]	; (8003860 <_printf_i+0x248>)
 80037c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037c4:	e7e3      	b.n	800378e <_printf_i+0x176>
 80037c6:	0659      	lsls	r1, r3, #25
 80037c8:	bf48      	it	mi
 80037ca:	b2b6      	uxthmi	r6, r6
 80037cc:	e7e6      	b.n	800379c <_printf_i+0x184>
 80037ce:	4615      	mov	r5, r2
 80037d0:	e7bb      	b.n	800374a <_printf_i+0x132>
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	6826      	ldr	r6, [r4, #0]
 80037d6:	1d18      	adds	r0, r3, #4
 80037d8:	6961      	ldr	r1, [r4, #20]
 80037da:	6028      	str	r0, [r5, #0]
 80037dc:	0635      	lsls	r5, r6, #24
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	d501      	bpl.n	80037e6 <_printf_i+0x1ce>
 80037e2:	6019      	str	r1, [r3, #0]
 80037e4:	e002      	b.n	80037ec <_printf_i+0x1d4>
 80037e6:	0670      	lsls	r0, r6, #25
 80037e8:	d5fb      	bpl.n	80037e2 <_printf_i+0x1ca>
 80037ea:	8019      	strh	r1, [r3, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	4615      	mov	r5, r2
 80037f0:	6123      	str	r3, [r4, #16]
 80037f2:	e7ba      	b.n	800376a <_printf_i+0x152>
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	2100      	movs	r1, #0
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	681d      	ldr	r5, [r3, #0]
 80037fe:	6862      	ldr	r2, [r4, #4]
 8003800:	4628      	mov	r0, r5
 8003802:	f000 f82f 	bl	8003864 <memchr>
 8003806:	b108      	cbz	r0, 800380c <_printf_i+0x1f4>
 8003808:	1b40      	subs	r0, r0, r5
 800380a:	6060      	str	r0, [r4, #4]
 800380c:	6863      	ldr	r3, [r4, #4]
 800380e:	6123      	str	r3, [r4, #16]
 8003810:	2300      	movs	r3, #0
 8003812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003816:	e7a8      	b.n	800376a <_printf_i+0x152>
 8003818:	462a      	mov	r2, r5
 800381a:	4649      	mov	r1, r9
 800381c:	4640      	mov	r0, r8
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	47d0      	blx	sl
 8003822:	3001      	adds	r0, #1
 8003824:	d0ab      	beq.n	800377e <_printf_i+0x166>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	079b      	lsls	r3, r3, #30
 800382a:	d413      	bmi.n	8003854 <_printf_i+0x23c>
 800382c:	68e0      	ldr	r0, [r4, #12]
 800382e:	9b03      	ldr	r3, [sp, #12]
 8003830:	4298      	cmp	r0, r3
 8003832:	bfb8      	it	lt
 8003834:	4618      	movlt	r0, r3
 8003836:	e7a4      	b.n	8003782 <_printf_i+0x16a>
 8003838:	2301      	movs	r3, #1
 800383a:	4632      	mov	r2, r6
 800383c:	4649      	mov	r1, r9
 800383e:	4640      	mov	r0, r8
 8003840:	47d0      	blx	sl
 8003842:	3001      	adds	r0, #1
 8003844:	d09b      	beq.n	800377e <_printf_i+0x166>
 8003846:	3501      	adds	r5, #1
 8003848:	68e3      	ldr	r3, [r4, #12]
 800384a:	9903      	ldr	r1, [sp, #12]
 800384c:	1a5b      	subs	r3, r3, r1
 800384e:	42ab      	cmp	r3, r5
 8003850:	dcf2      	bgt.n	8003838 <_printf_i+0x220>
 8003852:	e7eb      	b.n	800382c <_printf_i+0x214>
 8003854:	2500      	movs	r5, #0
 8003856:	f104 0619 	add.w	r6, r4, #25
 800385a:	e7f5      	b.n	8003848 <_printf_i+0x230>
 800385c:	08003bd7 	.word	0x08003bd7
 8003860:	08003be8 	.word	0x08003be8

08003864 <memchr>:
 8003864:	4603      	mov	r3, r0
 8003866:	b510      	push	{r4, lr}
 8003868:	b2c9      	uxtb	r1, r1
 800386a:	4402      	add	r2, r0
 800386c:	4293      	cmp	r3, r2
 800386e:	4618      	mov	r0, r3
 8003870:	d101      	bne.n	8003876 <memchr+0x12>
 8003872:	2000      	movs	r0, #0
 8003874:	e003      	b.n	800387e <memchr+0x1a>
 8003876:	7804      	ldrb	r4, [r0, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	428c      	cmp	r4, r1
 800387c:	d1f6      	bne.n	800386c <memchr+0x8>
 800387e:	bd10      	pop	{r4, pc}

08003880 <memcpy>:
 8003880:	440a      	add	r2, r1
 8003882:	4291      	cmp	r1, r2
 8003884:	f100 33ff 	add.w	r3, r0, #4294967295
 8003888:	d100      	bne.n	800388c <memcpy+0xc>
 800388a:	4770      	bx	lr
 800388c:	b510      	push	{r4, lr}
 800388e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003892:	4291      	cmp	r1, r2
 8003894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003898:	d1f9      	bne.n	800388e <memcpy+0xe>
 800389a:	bd10      	pop	{r4, pc}

0800389c <memmove>:
 800389c:	4288      	cmp	r0, r1
 800389e:	b510      	push	{r4, lr}
 80038a0:	eb01 0402 	add.w	r4, r1, r2
 80038a4:	d902      	bls.n	80038ac <memmove+0x10>
 80038a6:	4284      	cmp	r4, r0
 80038a8:	4623      	mov	r3, r4
 80038aa:	d807      	bhi.n	80038bc <memmove+0x20>
 80038ac:	1e43      	subs	r3, r0, #1
 80038ae:	42a1      	cmp	r1, r4
 80038b0:	d008      	beq.n	80038c4 <memmove+0x28>
 80038b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ba:	e7f8      	b.n	80038ae <memmove+0x12>
 80038bc:	4601      	mov	r1, r0
 80038be:	4402      	add	r2, r0
 80038c0:	428a      	cmp	r2, r1
 80038c2:	d100      	bne.n	80038c6 <memmove+0x2a>
 80038c4:	bd10      	pop	{r4, pc}
 80038c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038ce:	e7f7      	b.n	80038c0 <memmove+0x24>

080038d0 <_free_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
 80038d4:	2900      	cmp	r1, #0
 80038d6:	d040      	beq.n	800395a <_free_r+0x8a>
 80038d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038dc:	1f0c      	subs	r4, r1, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	bfb8      	it	lt
 80038e2:	18e4      	addlt	r4, r4, r3
 80038e4:	f000 f910 	bl	8003b08 <__malloc_lock>
 80038e8:	4a1c      	ldr	r2, [pc, #112]	; (800395c <_free_r+0x8c>)
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	b933      	cbnz	r3, 80038fc <_free_r+0x2c>
 80038ee:	6063      	str	r3, [r4, #4]
 80038f0:	6014      	str	r4, [r2, #0]
 80038f2:	4628      	mov	r0, r5
 80038f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038f8:	f000 b90c 	b.w	8003b14 <__malloc_unlock>
 80038fc:	42a3      	cmp	r3, r4
 80038fe:	d908      	bls.n	8003912 <_free_r+0x42>
 8003900:	6820      	ldr	r0, [r4, #0]
 8003902:	1821      	adds	r1, r4, r0
 8003904:	428b      	cmp	r3, r1
 8003906:	bf01      	itttt	eq
 8003908:	6819      	ldreq	r1, [r3, #0]
 800390a:	685b      	ldreq	r3, [r3, #4]
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	e7ed      	b.n	80038ee <_free_r+0x1e>
 8003912:	461a      	mov	r2, r3
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	b10b      	cbz	r3, 800391c <_free_r+0x4c>
 8003918:	42a3      	cmp	r3, r4
 800391a:	d9fa      	bls.n	8003912 <_free_r+0x42>
 800391c:	6811      	ldr	r1, [r2, #0]
 800391e:	1850      	adds	r0, r2, r1
 8003920:	42a0      	cmp	r0, r4
 8003922:	d10b      	bne.n	800393c <_free_r+0x6c>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	4401      	add	r1, r0
 8003928:	1850      	adds	r0, r2, r1
 800392a:	4283      	cmp	r3, r0
 800392c:	6011      	str	r1, [r2, #0]
 800392e:	d1e0      	bne.n	80038f2 <_free_r+0x22>
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4401      	add	r1, r0
 8003936:	6011      	str	r1, [r2, #0]
 8003938:	6053      	str	r3, [r2, #4]
 800393a:	e7da      	b.n	80038f2 <_free_r+0x22>
 800393c:	d902      	bls.n	8003944 <_free_r+0x74>
 800393e:	230c      	movs	r3, #12
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	e7d6      	b.n	80038f2 <_free_r+0x22>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	1821      	adds	r1, r4, r0
 8003948:	428b      	cmp	r3, r1
 800394a:	bf01      	itttt	eq
 800394c:	6819      	ldreq	r1, [r3, #0]
 800394e:	685b      	ldreq	r3, [r3, #4]
 8003950:	1809      	addeq	r1, r1, r0
 8003952:	6021      	streq	r1, [r4, #0]
 8003954:	6063      	str	r3, [r4, #4]
 8003956:	6054      	str	r4, [r2, #4]
 8003958:	e7cb      	b.n	80038f2 <_free_r+0x22>
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	200001b4 	.word	0x200001b4

08003960 <sbrk_aligned>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4e0e      	ldr	r6, [pc, #56]	; (800399c <sbrk_aligned+0x3c>)
 8003964:	460c      	mov	r4, r1
 8003966:	6831      	ldr	r1, [r6, #0]
 8003968:	4605      	mov	r5, r0
 800396a:	b911      	cbnz	r1, 8003972 <sbrk_aligned+0x12>
 800396c:	f000 f8bc 	bl	8003ae8 <_sbrk_r>
 8003970:	6030      	str	r0, [r6, #0]
 8003972:	4621      	mov	r1, r4
 8003974:	4628      	mov	r0, r5
 8003976:	f000 f8b7 	bl	8003ae8 <_sbrk_r>
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	d00a      	beq.n	8003994 <sbrk_aligned+0x34>
 800397e:	1cc4      	adds	r4, r0, #3
 8003980:	f024 0403 	bic.w	r4, r4, #3
 8003984:	42a0      	cmp	r0, r4
 8003986:	d007      	beq.n	8003998 <sbrk_aligned+0x38>
 8003988:	1a21      	subs	r1, r4, r0
 800398a:	4628      	mov	r0, r5
 800398c:	f000 f8ac 	bl	8003ae8 <_sbrk_r>
 8003990:	3001      	adds	r0, #1
 8003992:	d101      	bne.n	8003998 <sbrk_aligned+0x38>
 8003994:	f04f 34ff 	mov.w	r4, #4294967295
 8003998:	4620      	mov	r0, r4
 800399a:	bd70      	pop	{r4, r5, r6, pc}
 800399c:	200001b8 	.word	0x200001b8

080039a0 <_malloc_r>:
 80039a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039a4:	1ccd      	adds	r5, r1, #3
 80039a6:	f025 0503 	bic.w	r5, r5, #3
 80039aa:	3508      	adds	r5, #8
 80039ac:	2d0c      	cmp	r5, #12
 80039ae:	bf38      	it	cc
 80039b0:	250c      	movcc	r5, #12
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	4607      	mov	r7, r0
 80039b6:	db01      	blt.n	80039bc <_malloc_r+0x1c>
 80039b8:	42a9      	cmp	r1, r5
 80039ba:	d905      	bls.n	80039c8 <_malloc_r+0x28>
 80039bc:	230c      	movs	r3, #12
 80039be:	2600      	movs	r6, #0
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4630      	mov	r0, r6
 80039c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039c8:	4e2e      	ldr	r6, [pc, #184]	; (8003a84 <_malloc_r+0xe4>)
 80039ca:	f000 f89d 	bl	8003b08 <__malloc_lock>
 80039ce:	6833      	ldr	r3, [r6, #0]
 80039d0:	461c      	mov	r4, r3
 80039d2:	bb34      	cbnz	r4, 8003a22 <_malloc_r+0x82>
 80039d4:	4629      	mov	r1, r5
 80039d6:	4638      	mov	r0, r7
 80039d8:	f7ff ffc2 	bl	8003960 <sbrk_aligned>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	4604      	mov	r4, r0
 80039e0:	d14d      	bne.n	8003a7e <_malloc_r+0xde>
 80039e2:	6834      	ldr	r4, [r6, #0]
 80039e4:	4626      	mov	r6, r4
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	d140      	bne.n	8003a6c <_malloc_r+0xcc>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	4631      	mov	r1, r6
 80039ee:	4638      	mov	r0, r7
 80039f0:	eb04 0803 	add.w	r8, r4, r3
 80039f4:	f000 f878 	bl	8003ae8 <_sbrk_r>
 80039f8:	4580      	cmp	r8, r0
 80039fa:	d13a      	bne.n	8003a72 <_malloc_r+0xd2>
 80039fc:	6821      	ldr	r1, [r4, #0]
 80039fe:	3503      	adds	r5, #3
 8003a00:	1a6d      	subs	r5, r5, r1
 8003a02:	f025 0503 	bic.w	r5, r5, #3
 8003a06:	3508      	adds	r5, #8
 8003a08:	2d0c      	cmp	r5, #12
 8003a0a:	bf38      	it	cc
 8003a0c:	250c      	movcc	r5, #12
 8003a0e:	4638      	mov	r0, r7
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7ff ffa5 	bl	8003960 <sbrk_aligned>
 8003a16:	3001      	adds	r0, #1
 8003a18:	d02b      	beq.n	8003a72 <_malloc_r+0xd2>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	442b      	add	r3, r5
 8003a1e:	6023      	str	r3, [r4, #0]
 8003a20:	e00e      	b.n	8003a40 <_malloc_r+0xa0>
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	1b52      	subs	r2, r2, r5
 8003a26:	d41e      	bmi.n	8003a66 <_malloc_r+0xc6>
 8003a28:	2a0b      	cmp	r2, #11
 8003a2a:	d916      	bls.n	8003a5a <_malloc_r+0xba>
 8003a2c:	1961      	adds	r1, r4, r5
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	6025      	str	r5, [r4, #0]
 8003a32:	bf18      	it	ne
 8003a34:	6059      	strne	r1, [r3, #4]
 8003a36:	6863      	ldr	r3, [r4, #4]
 8003a38:	bf08      	it	eq
 8003a3a:	6031      	streq	r1, [r6, #0]
 8003a3c:	5162      	str	r2, [r4, r5]
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	4638      	mov	r0, r7
 8003a42:	f104 060b 	add.w	r6, r4, #11
 8003a46:	f000 f865 	bl	8003b14 <__malloc_unlock>
 8003a4a:	f026 0607 	bic.w	r6, r6, #7
 8003a4e:	1d23      	adds	r3, r4, #4
 8003a50:	1af2      	subs	r2, r6, r3
 8003a52:	d0b6      	beq.n	80039c2 <_malloc_r+0x22>
 8003a54:	1b9b      	subs	r3, r3, r6
 8003a56:	50a3      	str	r3, [r4, r2]
 8003a58:	e7b3      	b.n	80039c2 <_malloc_r+0x22>
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	bf0c      	ite	eq
 8003a60:	6032      	streq	r2, [r6, #0]
 8003a62:	605a      	strne	r2, [r3, #4]
 8003a64:	e7ec      	b.n	8003a40 <_malloc_r+0xa0>
 8003a66:	4623      	mov	r3, r4
 8003a68:	6864      	ldr	r4, [r4, #4]
 8003a6a:	e7b2      	b.n	80039d2 <_malloc_r+0x32>
 8003a6c:	4634      	mov	r4, r6
 8003a6e:	6876      	ldr	r6, [r6, #4]
 8003a70:	e7b9      	b.n	80039e6 <_malloc_r+0x46>
 8003a72:	230c      	movs	r3, #12
 8003a74:	4638      	mov	r0, r7
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	f000 f84c 	bl	8003b14 <__malloc_unlock>
 8003a7c:	e7a1      	b.n	80039c2 <_malloc_r+0x22>
 8003a7e:	6025      	str	r5, [r4, #0]
 8003a80:	e7de      	b.n	8003a40 <_malloc_r+0xa0>
 8003a82:	bf00      	nop
 8003a84:	200001b4 	.word	0x200001b4

08003a88 <_realloc_r>:
 8003a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a8c:	4680      	mov	r8, r0
 8003a8e:	4614      	mov	r4, r2
 8003a90:	460e      	mov	r6, r1
 8003a92:	b921      	cbnz	r1, 8003a9e <_realloc_r+0x16>
 8003a94:	4611      	mov	r1, r2
 8003a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9a:	f7ff bf81 	b.w	80039a0 <_malloc_r>
 8003a9e:	b92a      	cbnz	r2, 8003aac <_realloc_r+0x24>
 8003aa0:	f7ff ff16 	bl	80038d0 <_free_r>
 8003aa4:	4625      	mov	r5, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aac:	f000 f838 	bl	8003b20 <_malloc_usable_size_r>
 8003ab0:	4284      	cmp	r4, r0
 8003ab2:	4607      	mov	r7, r0
 8003ab4:	d802      	bhi.n	8003abc <_realloc_r+0x34>
 8003ab6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aba:	d812      	bhi.n	8003ae2 <_realloc_r+0x5a>
 8003abc:	4621      	mov	r1, r4
 8003abe:	4640      	mov	r0, r8
 8003ac0:	f7ff ff6e 	bl	80039a0 <_malloc_r>
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d0ed      	beq.n	8003aa6 <_realloc_r+0x1e>
 8003aca:	42bc      	cmp	r4, r7
 8003acc:	4622      	mov	r2, r4
 8003ace:	4631      	mov	r1, r6
 8003ad0:	bf28      	it	cs
 8003ad2:	463a      	movcs	r2, r7
 8003ad4:	f7ff fed4 	bl	8003880 <memcpy>
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4640      	mov	r0, r8
 8003adc:	f7ff fef8 	bl	80038d0 <_free_r>
 8003ae0:	e7e1      	b.n	8003aa6 <_realloc_r+0x1e>
 8003ae2:	4635      	mov	r5, r6
 8003ae4:	e7df      	b.n	8003aa6 <_realloc_r+0x1e>
	...

08003ae8 <_sbrk_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	2300      	movs	r3, #0
 8003aec:	4d05      	ldr	r5, [pc, #20]	; (8003b04 <_sbrk_r+0x1c>)
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	602b      	str	r3, [r5, #0]
 8003af4:	f7fd f90e 	bl	8000d14 <_sbrk>
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d102      	bne.n	8003b02 <_sbrk_r+0x1a>
 8003afc:	682b      	ldr	r3, [r5, #0]
 8003afe:	b103      	cbz	r3, 8003b02 <_sbrk_r+0x1a>
 8003b00:	6023      	str	r3, [r4, #0]
 8003b02:	bd38      	pop	{r3, r4, r5, pc}
 8003b04:	200001bc 	.word	0x200001bc

08003b08 <__malloc_lock>:
 8003b08:	4801      	ldr	r0, [pc, #4]	; (8003b10 <__malloc_lock+0x8>)
 8003b0a:	f000 b811 	b.w	8003b30 <__retarget_lock_acquire_recursive>
 8003b0e:	bf00      	nop
 8003b10:	200001c0 	.word	0x200001c0

08003b14 <__malloc_unlock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_unlock+0x8>)
 8003b16:	f000 b80c 	b.w	8003b32 <__retarget_lock_release_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	200001c0 	.word	0x200001c0

08003b20 <_malloc_usable_size_r>:
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbc      	itt	lt
 8003b2a:	580b      	ldrlt	r3, [r1, r0]
 8003b2c:	18c0      	addlt	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <__retarget_lock_acquire_recursive>:
 8003b30:	4770      	bx	lr

08003b32 <__retarget_lock_release_recursive>:
 8003b32:	4770      	bx	lr

08003b34 <_init>:
 8003b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b36:	bf00      	nop
 8003b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	469e      	mov	lr, r3
 8003b3e:	4770      	bx	lr

08003b40 <_fini>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr
